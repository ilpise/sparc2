var geodash={init:{},directives:{},controllers:{},filters:{},handlers:{},vecmath:{},tilemath:{},api:{},listeners:{},ui:{}};geodash.init.templates=function(app){void 0!=geodash.templates&&(geodash.meta.templates=[],$.each(geodash.templates,function(name,template){geodash.meta.templates.push(name),app.run(function($templateCache){$templateCache.put(name,template)})}))},geodash.init.filters=function(app){void 0!=geodash.filters&&(geodash.meta.filters=[],$.each(geodash.filters,function(name,func){geodash.meta.filters.push(name),app.filter(name,func)}))},geodash.init.directives=function(app){void 0!=geodash.directives&&(geodash.meta.directives=[],$.each(geodash.directives,function(name,dir){geodash.meta.directives.push(name),app.directive(name,dir)}))},geodash.init.listeners=function(){$("body").on("click",".btn-clear",function(event){var selector=$(event.currentTarget).attr("data-target");try{$(selector).typeahead("close")}catch(err){}$(selector).each(function(){var input=$(this);if(input.val(null),void 0!=input.data("backend")){var backend=$("#"+input.data("backend"));backend.val(null),backend.trigger("input"),backend.change()}})}),$("body").on("click",".btn-off",function(event){var selector=$(event.currentTarget).attr("data-target");$(selector).each(function(){var input=$(this);input.val("false"),input.trigger("input"),input.change()})}),$("body").on("click",".btn-on",function(event){var selector=$(event.currentTarget).attr("data-target");$(selector).each(function(){var input=$(this);input.val("true"),input.trigger("input"),input.change()})}),$("body").on("click",".geodash-intent",function(event){event.preventDefault();var that=$(this),scope=geodash.api.getScope(that.attr("data-intent-ctrl"));if(that.hasClass("geodash-toggle")){var intentData=JSON.parse(that.attr("data-intent-data"));that.hasClass("geodash-off")?(that.removeClass("geodash-off"),geodash.api.intend(that.attr("data-intent-names")[0],intentData,scope)):(that.addClass("geodash-off"),geodash.api.intend(that.attr("data-intent-names")[1],intentData,scope))}else if(that.hasClass("geodash-radio")){var siblings=that.parents(".geodash-radio-group:first").find(".geodash-radio").not(that);if(!that.hasClass("geodash-on")){that.addClass("geodash-on"),that.data("intent-class-on")&&(that.addClass(that.data("intent-class-on")),siblings.removeClass(that.data("intent-class-on"))),siblings.removeClass("geodash-on"),that.data("intent-class-off")&&(that.removeClass(that.data("intent-class-off")),siblings.addClass(that.data("intent-class-off")));var intentName=that.attr("data-intent-name"),intentData=JSON.parse(that.attr("data-intent-data"));geodash.api.intend(intentName,intentData,scope)}}else{var intentName=that.attr("data-intent-name"),intentData=JSON.parse(that.attr("data-intent-data"));geodash.api.intend(intentName,intentData,scope)}})},geodash.init.typeahead=function($element,featurelayers,baselayers){$(".typeahead",$element).each(function(){var s=$(this),initialData=(s.data("placeholder"),s.data("initialData")),template_empty=(s.data("width"),s.data("height"),s.data("template-empty")),bloodhoundData=(s.data("template-suggestion"),[]);if(angular.isString(initialData))if("layers"==initialData)bloodhoundData=[],featurelayers=featurelayers||geodash.api.listFeatureLayers(),void 0!=featurelayers&&(bloodhoundData=bloodhoundData.concat($.map(featurelayers,function(x,i){return{id:x.id,text:x.id}}))),baselayers=baselayers||geodash.api.listBaseLayers(),void 0!=baselayers&&(bloodhoundData=bloodhoundData.concat($.map(baselayers,function(x,i){return{id:x.id,text:x.id}})));else if("featurelayers"==initialData)featurelayers=featurelayers||geodash.api.listFeatureLayers(),bloodhoundData=$.map(featurelayers,function(fl,id){return{id:id,text:id}});else if("baselayers"==initialData)baselayers=baselayers||geodash.api.listBaseLayers(),bloodhoundData=$.map(baselayers,function(bl,id){return{id:id,text:id}});else{bloodhoundData=[].concat(geodash.initial_data.data[initialData]);for(var i=0;i<bloodhoundData.length;i++)angular.isString(bloodhoundData[i])&&(bloodhoundData[i]={id:bloodhoundData[i],text:bloodhoundData[i]})}else if(Array.isArray(initialData)){bloodhoundData=[].concat(initialData);for(var i=0;i<bloodhoundData.length;i++)angular.isString(bloodhoundData[i])&&(bloodhoundData[i]={id:bloodhoundData[i],text:bloodhoundData[i]})}if(angular.isDefined(bloodhoundData)&&bloodhoundData.length>0){bloodhoundData.sort(function(a,b){var textA=a.text.toLowerCase(),textB=b.text.toLowerCase();return textA<textB?-1:textA>textB?1:0});var engine=new Bloodhound({identify:function(obj){return obj.text},datumTokenizer:function(d){return Bloodhound.tokenizers.whitespace(d.text)},queryTokenizer:Bloodhound.tokenizers.whitespace,local:bloodhoundData});s.data("engine",engine),s.typeahead("destroy","NoCached"),s.typeahead(null,{name:s.attr("name"),minLength:0,limit:10,hint:!1,highlight:!0,displayKey:"text",source:function(query,cb){engine.ttAdapter()(query,cb)},templates:{empty:template_empty,suggestion:function(data){return"<p><strong>"+data.text+"</strong> - "+data.id+"</p>"},footer:function(data){return"<div>Searched for <strong>"+data.query+"</strong></div>"}}}).on("blur",function(event){var results=engine.get($(this).val());$("#"+$(this).data("backend")).val(1==results.length?results[0].id:null).trigger("input").change()}).on("typeahead:change",function(event,value){console.log("Event: ",event,value);var results=engine.get(value);$("#"+$(this).data("backend")).val(1==results.length?results[0].id:null).trigger("input").change()}).on("typeahead:select typeahead:autocomplete typeahead:cursorchange",function(event,obj){console.log("Event: ",event,obj);$("#"+$(this).data("backend")).val(extract("id",obj,null)).trigger("input").change()})}})},geodash.api.parseTrue=function(value){return["on","true","t","1",1,!0].indexOf(value)!=-1},geodash.api.getOption=function(options,name){return void 0!=options&&null!=options?options[name]:void 0},geodash.api.getScope=function(id){return angular.element("#"+id).isolateScope()||angular.element("#"+id).scope()},geodash.api.getDashboardConfig=function(options){var scope=geodash.api.getOption(options,"$scope")||geodash.api.getOption(options,"scope")||geodash.api.getScope("geodash-main");return scope.map_config},geodash.api.getPage=function(id,options){var config=geodash.api.getDashboardConfig(options),matches=$.grep(config.pages,function(x,i){return x.id==id});return 1==matches.length?matches[0].url:void 0},geodash.api.hasLayer=function(id,layers){var matches=$.grep(layers,function(x,i){return x.id==id});return 1==matches.length},geodash.api.getLayer=function(id,layers){var layer=void 0,matches=$.grep(layers,function(x,i){return x.id==id});return 1==matches.length&&(layer=matches[0]),layer},geodash.api.listBaseLayers=function(options){var config=geodash.api.getDashboardConfig(options);return extract("baselayers",config,[])},geodash.api.getBaseLayer=function(id,options){var config=geodash.api.getDashboardConfig(options);return geodash.api.getLayer(id,config.baselayers)},geodash.api.hasBaseLayer=function(id,options){var config=geodash.api.getDashboardConfig(options);return geodash.api.hasLayer(id,config.baselayers)},geodash.api.listFeatureLayers=function(options){var config=geodash.api.getDashboardConfig(options);return extract("featurelayers",config,[])},geodash.api.getFeatureLayer=function(id,options){var config=geodash.api.getDashboardConfig(options);return geodash.api.getLayer(id,config.featurelayers)},geodash.api.hasFeatureLayer=function(id,options){var config=geodash.api.getDashboardConfig(options);return geodash.api.hasLayer(id,config.featurelayers)},geodash.api.welcome=function(options){options=options||{};var scope=options.$scope||options.scope||angular.element("#geodash-main").scope(),intentData={id:"geodash-modal-welcome",dynamic:{},"static":{welcome:scope.map_config.welcome}};geodash.api.intend("toggleModal",intentData,scope)},geodash.api.intend=function(name,data,scope){scope.$emit(name,data)},geodash.assert_float=function(x,fallback){return void 0===x||""===x?fallback:angular.isNumber(x)?x:parseFloat(x)},geodash.assert_array_length=function(x,length,fallback){return void 0===x||""===x?fallback:angular.isString(x)?(x=x.split(","),x.length==length?x:fallback):angular.isArray(x)?x.length==length?x:fallback:void 0},geodash.api.opt=function(options,names,fallback,fallback2){if(void 0!=options){if($.isArray(names)){for(var value=void 0,i=0;i<names.length&&(value=options[names[i]],void 0==value);i++);return value||fallback||fallback2}return options[names]||fallback||fallback2}return fallback||fallback2},geodash.api.opt_i=function(options,names,fallback){return geodash.api.opt(options,names,fallback,0)},geodash.api.opt_s=function(options,names,fallback){return geodash.api.opt(options,names,fallback,"")},geodash.api.opt_b=function(options,names,fallback){return geodash.api.opt(options,names,fallback,!1)},geodash.api.opt_j=function(options,names,fallback){return geodash.api.opt(options,names,fallback,{})},geodash.api.normalize_feature=function(feature){var feature={attributes:feature.attributes||feature.properties,geometry:feature.geometry};return feature},geodash.api.flatten=function(obj,prefix){var newObject={};return $.each(obj,function(key,value){var newKey=void 0!=prefix?prefix+"__"+key:key;void 0===value||null===value||angular.isString(value)||angular.isNumber(value)||"boolean"==typeof value?newObject[newKey]=value:angular.isArray(value)?$.each(geodash.api.flatten(value,newKey),function(key2,value2){newObject[""+key2]=value2}):$.each(geodash.api.flatten(value,newKey),function(key2,value2){newObject[key2]=value2})}),newObject},geodash.api.unpack=function(obj){var newObject={};return $.each(obj,function(key,value){if(key.indexOf("__")==-1)newObject[key]=value;else{for(var keyChain=key.split("__"),target=obj,j=0;j<keyChain.length;j++){var newKey=keyChain[j];newKey in target||(target[newKey]={}),target=target[newKey]}target[keyChain[keyChain.length-1]]=value}}),newObject},geodash.api.buildScope=function(event,args){var mainScope=geodash.api.getScope("geodash-main"),scope_new=(args.id_target||args.id_show||args.id,event.targetScope,{state:mainScope.state,meta:geodash.meta});return angular.isDefined(args)&&("static"in args&&(scope_new=$.extend(scope_new,args["static"])),"dynamic"in args&&$.each(args.dynamic,function(key,value){if(angular.isString(value))"map_config"==value?scope_new[key]=mainScope.map_config:"state"==value&&(scope_new[key]=mainScope.state);else if(angular.isArray(value)){var value_0_lc=value[0].toLowerCase();"source"==value_0_lc?scope_new[key]=extract(expand(value.slice(1)),event.targetScope):"baselayer"==value_0_lc||"bl"==value_0_lc?scope_new[key]=geodash.api.getBaseLayer(value[1])||void 0:"featurelayer"==value_0_lc||"fl"==value_0_lc?scope_new[key]=geodash.api.getFeatureLayer(value[1])||void 0:"map_config"==value_0_lc?scope_new[key]=extract(expand(value.slice(1)),mainScope.map_config):"state"==value_0_lc&&(scope_new[key]=extract(expand(value.slice(1)),mainScope.state))}else scope_new[key]=value})),$.extend(!0,{},scope_new)},geodash.api.updateValue=function(field_flat,source,target){if(field_flat.indexOf("__")==-1)target[field_flat]=source[field_flat];else{for(var keyChain=field_flat.split("__"),j=0;j<keyChain.length-1;j++){var newKey=keyChain[j];if(!(newKey in target)){var iTest=-1;try{iTest=parseInt(keyChain[j+1],10)}catch(err){iTest=-1}target[newKey]=iTest>=0?[]:{}}target=target[newKey]}var finalKey=keyChain[keyChain.length-1];if(angular.isArray(target)){if(finalKey>=target.length){for(var zeros=finalKey-target.length,k=0;k<zeros;k++)target.push({});target.push(source[field_flat])}}else target[finalKey]=source[field_flat]}},geodash.api.setValue=function(field_flat,value,target){if(field_flat.indexOf("__")==-1)target[field_flat]=value;else{for(var keyChain=field_flat.split("__"),j=0;j<keyChain.length-1;j++){var newKey=keyChain[j];if(!(newKey in target)){var iTest=-1;try{iTest=parseInt(keyChain[j+1],10)}catch(err){iTest=-1}target[newKey]=iTest>=0?[]:{}}target=target[newKey]}var finalKey=keyChain[keyChain.length-1];if(angular.isArray(target)){if(finalKey>=target.length){for(var zeros=finalKey-target.length,k=0;k<zeros;k++)target.push({});target.push(value)}}else target[finalKey]=value}},geodash.listeners.saveAndHide=function(event,args){geodash.listeners.hideModal(event,args);var target=args.id_target||args.id,modal_scope_target=geodash.api.getScope(target),modal_scope_new=geodash.api.buildScope(event,args);modal_scope_target.$apply(function(){$.each(modal_scope_new,function(key,value){modal_scope_target[key]=value})})},geodash.listeners.switchModal=function(event,args){geodash.listeners.hideModal(event,args),geodash.listeners.showModal(event,args)},geodash.listeners.hideModal=function(event,args){var id=args.id_hide||args.id;try{$("#"+id).modal("hide");var modal_scope=geodash.api.getScope(id),aClear=args.clear;"clear"in args&&void 0!=args.clear&&modal_scope.$apply(function(){$.each(aClear,function(i,x){modal_scope[x]=void 0})})}catch(err){}},geodash.listeners.toggleModal=function(event,args){geodash.listeners.showModal(event,args)},geodash.listeners.showModal=function(event,args){console.log("event",event),console.log("args",args);var id=args.id_show||args.id,modal_scope=geodash.api.getScope(id),modal_scope_new=geodash.api.buildScope(event,args),modalOptions=args.modal||{};modalOptions.show=!1,modal_scope.$apply(function(){modal_scope.push(modal_scope_new),setTimeout(function(){var modalElement=$("#"+id),targetTab=modal_scope.tab;void 0!=targetTab?(modalElement.find(".nav-tabs li").each(function(){var that=$(this),thisTab=that.find("a").attr("href").substring(1);targetTab==thisTab?that.addClass("active"):that.removeClass("active")}),modalElement.find(".tab-pane").each(function(){var that=$(this);targetTab==that.attr("id")?that.addClass("in active"):that.removeClass("in active")})):(modalElement.find(".nav-tabs li").slice(0,1).addClass("active"),modalElement.find(".nav-tabs li").slice(1).removeClass("active"),modalElement.find(".tab-pane").slice(0,1).addClass("in active"),modalElement.find(".tab-pane").slice(1).removeClass("in active")),$('[data-toggle="tooltip"]',modalElement).tooltip(),geodash.init.typeahead(modalElement,modal_scope.featurelayers,modal_scope.baselayers),$("#"+id).modal(modalOptions),$("#"+id).modal("toggle")},0)})},geodash.ui.showOptions=function($event,selector){try{var input=$(selector);input.typeahead("open"),input.data("ttTypeahead").menu.update.apply(input.data("ttTypeahead").menu,[""]);var engine=input.data("engine");engine.search.apply(engine,[""])}catch(err){}};var currentControllers=[];geodash.init_controller_base=function(app){app.controller("GeoDashControllerBase",geodash.controllers.controller_base)},geodash.init_controller=function(that,app,controller){var controllerName=that.data("controllerName")||that.attr("geodash-controller")||that.attr("name")||that.attr("id");void 0==controllerName||null==controllerName||""==controllerName?(console.log("Error: Could not load controller for element, because name could not be resolved"),console.log(that,controller)):(currentControllers.push({controllerName:controllerName,controller:controller||geodash.controllers.controller_base}),app.controller(controllerName,controller||geodash.controllers.GeoDashControllerBase))},geodash.init_controllers=function(that,app,controllers){for(var i=0;i<controllers.length;i++){var c=controllers[i];$(c.selector,that).each(function(){try{geodash.init_controller($(this),app,c.controller)}catch(err){console.log('Could not load GeoDash Controller "'+c.selector+'"',err)}})}},geodash.vecmath={},geodash.vecmath.distance=function(a,b){var p=L.Projection.SphericalMercator;if(void 0!=b.toString&&b.toString().startsWith("LatLng"))return p.project(a).distanceTo(p.project(b));var minDistance=void 0;return $.each(b._layers,function(id,layer){var rings=[];if("MultiPolygon"==layer.feature.geometry.type)for(var i=0;i<layer._latlngs.length;i++)for(var j=0;j<layer._latlngs[i].length;j++)rings.push(layer._latlngs[i][j]);else rings.push(layer._latlngs);for(var r=0;r<rings.length;r++){var verticies=rings[r],i=0;for(void 0==minDistance&&(minDistance=L.LineUtil.pointToSegmentDistance(p.project(a),p.project(verticies[i]),p.project(verticies[i+1])),i++);i<verticies.length-1;i++){var d=L.LineUtil.pointToSegmentDistance(p.project(a),p.project(verticies[i]),p.project(verticies[i+1]));d<minDistance&&(minDistance=d)}}}),minDistance},geodash.vecmath.closestLocation=function(a,b){if(void 0!=b.toString&&b.toString().startsWith("LatLng"))return b;var p=L.Projection.SphericalMercator,minDistance=void 0,closestPoint=void 0;return $.each(b._layers,function(id,layer){var rings=[];if("MultiPolygon"==layer.feature.geometry.type)for(var i=0;i<layer._latlngs.length;i++)for(var j=0;j<layer._latlngs[i].length;j++)rings.push(layer._latlngs[i][j]);else rings.push(layer._latlngs);for(var r=0;r<rings.length;r++){var verticies=rings[r],i=0;for(void 0==minDistance&&(minDistance=L.LineUtil.pointToSegmentDistance(p.project(a),p.project(verticies[i]),p.project(verticies[i+1])),closestPoint=L.LineUtil.closestPointOnSegment(p.project(a),p.project(verticies[i]),p.project(verticies[i+1])),i++);i<verticies.length-1;i++){var d=L.LineUtil.pointToSegmentDistance(p.project(a),p.project(verticies[i]),p.project(verticies[i+1]));d<minDistance&&(minDistance=d,closestPoint=L.LineUtil.closestPointOnSegment(p.project(a),p.project(verticies[i]),p.project(verticies[i+1])))}}}),p.unproject(closestPoint)},geodash.vecmath.getClosestFeatureAndLocation=function(nearbyFeatures,target){var closestFeature=void 0,closestDistance=0,closestLocation=void 0;if(void 0!=nearbyFeatures&&nearbyFeatures.length>0){closestFeature=nearbyFeatures[0],closestDistance=geodash.vecmath.distance(target,nearbyFeatures[0].geometry),closestLocation=geodash.vecmath.closestLocation(target,nearbyFeatures[0].geometry);for(var i=1;i<nearbyFeatures.length;i++){var f=nearbyFeatures[i];geodash.vecmath.distance(target,f.geometry)<closestDistance&&(closestFeature=f,closestDistance=geodash.vecmath.distance(target,f.geometry),closestLocation=geodash.vecmath.closestLocation(target,f.geometry))}}return{feature:closestFeature,location:closestLocation}},geodash.init_state=function(state,stateschema){var newState=$.extend({},state),lat=getHashValueAsFloat(["latitude","lat","y"])||state.lat||0,lon=getHashValueAsFloat(["longitude","lon","long","lng","x"])||state.lon||0,z=getHashValueAsInteger(["zoom","z"])||state.z||3,delta={lat:lat,lon:lon,z:z};return newState.view=void 0!=newState.view?$.extend(newState.view,delta):delta,void 0!=newState.filters&&$.each(newState.filters,function(layer_id,layer_filters){$.each(layer_filters,function(filter_id,filer_value){var type=stateschema.filters[layer_id][filter_id].toLowerCase(),value=getHashValue(layer_id+":"+filter_id,type);void 0!=value&&""!=value&&(newState.filters[layer_id][filter_id]=value)})}),void 0!=newState.styles,newState},geodash.ui_init_slider_label=function($interpolate,that,type,range,value){if("ordinal"==type){var ctx={value:value};that.data("label").html($interpolate(that.data("label-template"))(ctx))}else if("continuous"==type)if("boolean"==$.type(range)&&range||"true"==range.toLowerCase()){var ctx={values:[value[0],value[1]]};that.data("label").html($interpolate(that.data("label-template"))(ctx))}else if("min"==range||"max"==range){var ctx={value:value};that.data("label").html($interpolate(that.data("label-template"))(ctx))}},geodash.ui_init_slider_slider=function($interpolate,$scope,that,type,range,value,minValue,maxValue,step){"ordinal"==type?that.slider({range:!!("boolean"==$.type(range)&&range||"true"==range.toLowerCase())||range,value:value,min:0,max:maxValue,step:1,slide:function(event,ui){geodash.ui_update_slider_label.apply(this,[$interpolate,event,ui]);var output=that.data("output"),newValue=that.data("options")[ui.value],filter={};filter[output]=newValue,geodash.api.intend("filterChanged",{layer:"popatrisk",filter:filter},$scope)}}):"continuous"==type&&("boolean"==$.type(range)&&range||"true"==range.toLowerCase()?that.slider({range:!0,values:value,min:minValue,max:maxValue,step:step,slide:function(event,ui){geodash.ui_update_slider_label.apply(this,[$interpolate,event,ui]);var output=that.data("output"),newValue=ui.values,filter={};filter[output]=newValue,geodash.api.intend("filterChanged",{layer:"popatrisk",filter:filter},$scope)}}):"min"!=range&&"max"!=range||that.slider({range:range,value:value,min:minValue,max:maxValue,step:step,slide:function(event,ui){geodash.ui_update_slider_label.apply(this,[$interpolate,event,ui]);var output=that.data("output"),newValue=ui.value/100,filter={};filter[output]=newValue,geodash.api.intend("filterChanged",{layer:"popatrisk",filter:filter},$scope)}}))},geodash.ui_update_slider_label=function($interpolate,event,ui){var that=$(this),type=that.data("type"),range=that.data("range");if("ordinal"==type){var ctx={value:that.data("options")[ui.value]};that.data("label").html($interpolate(that.data("label-template"))(ctx))}else if("continuous"==type)if("boolean"==$.type(range)&&range||"true"==range.toLowerCase()){var ctx={values:[ui.values[0],ui.values[1]]};that.data("label").html($interpolate(that.data("label-template"))(ctx))}else if("min"==range||"max"==range){var ctx={value:ui.value/100};that.data("label").html($interpolate(that.data("label-template"))(ctx))}};var getHashValue=function(keys,type){var value=void 0;keys="string"==typeof keys?[keys.toLowerCase()]:$.map(keys,function(value,i){return value.toLowerCase()});for(var hash_lc=location.hash.toLowerCase(),i=0;i<keys.length;i++){var key=keys[i],keyAndHash=hash_lc.match(new RegExp(key+"=([^&]*)"));if(keyAndHash&&(value=keyAndHash[1],void 0!=value&&null!=value&&""!=value))break}if(void 0!=type)if("integer"==type)value=void 0!=value&&null!=value&&""!=value?parseInt(value,10):void 0;else if("stringarray"==type){if(void 0!=value){var newValue=value.split(",");value=newValue}}else if("integerarray"==type){if(void 0!=value){for(var sValue=value.split(","),newValue=[],i=0;i<sValue.length;i++){var v=sValue[i];newValue.push(void 0!=v&&null!=v&&""!=v?parseInt(v,10):void 0)}value=newValue}}else if("float"==type)value=void 0!=value&&null!=value&&""!=value?parseFloat(value):void 0;else if("floatarray"==type&&void 0!=value){for(var sValue=value.split(","),newValue=[],i=0;i<sValue.length;i++){var v=sValue[i];newValue.push(void 0!=v&&null!=v&&""!=v?parseFloat(v):void 0)}value=newValue}return value},hasHashValue=function(keys){var value=getHashValue(keys);return void 0!=value&&null!=value&&""!=value},getHashValueAsStringArray=function(keys){return getHashValue(keys,"stringarray")},getHashValueAsInteger=function(keys){return getHashValue(keys,"integer")},getHashValueAsIntegerArray=function(keys){return getHashValue(keys,"integerarray")},getHashValueAsFloat=function(keys){return getHashValue(keys,"float")},sortLayers=function(layers,reverse){var renderLayers=$.isArray(layers)?layers:$.map(layers,function(layer){return layer});return renderLayers=renderLayers.sort(function(a,b){return a.options.renderOrder-b.options.renderOrder}),reverse===!0&&renderLayers.reverse(),renderLayers},updateRenderOrder=function(layers){for(var i=0;i<layers.length;i++)layers[i].bringToFront()},layersAsArray=function(layers){return $.map(layers,function(layer,id){return{id:id,layer:layer}})},expand=function(x){var newArray=[];if(Array.isArray(x))for(var i=0;i<x.length;i++){var value=x[i];angular.isString(value)&&value.indexOf(".")!=-1?newArray=newArray.concat(value.split(".")):newArray.push(value)}else angular.isString(x)&&(newArray=x.split("."));return newArray},extract=function(keyChain,node,fallback){angular.isString(keyChain)&&(keyChain=keyChain.split("."));var obj=void 0;if(0==keyChain.length)obj=void 0!=node&&null!=node?node:fallback;else{var newKeyChain=keyChain.slice(1);if(0==newKeyChain.length&&angular.isString(keyChain[0])&&"length"==keyChain[0].toLowerCase()&&(obj=Array.isArray(node)?node.length:angular.isDefined(node)?node.length:0),void 0==obj&&angular.isDefined(node))if(Array.isArray(node)){var index=angular.isString(keyChain[0])?parseInt(keyChain[0],10):keyChain[0];obj=extract(newKeyChain,node[index],fallback)}else obj=extract(newKeyChain,node[""+keyChain[0]],fallback)}return obj};geodash.codec={},geodash.codec.formatArray=function(path,obj,fallback){var result=fallback||"",x=extract(path,obj);return Array.isArray(x)?result=x.join(","):angular.isString(x)&&(result=x),result},geodash.codec.parseFeatures=function(response,fields_by_featuretype){var features=[];return $(response).find("gml\\:featuremember").each(function(){var f=$(this).children(),typeName=f.prop("tagName").toLowerCase(),attributes=geodash.codec.parseAttributes(f,fields_by_featuretype[typeName]),geom=geodash.codec.parseGeometry(f),newFeature={featuretype:typeName,attributes:attributes,geometry:geom};features.push(newFeature)}),features},geodash.codec.parseAttributes=function(element,fields){var attributes={};if(void 0!=fields)for(var k=0;k<fields.length;k++){var field=fields[k],attributeName=field.output||field.attribute;attributes[attributeName]=void 0;var inputName=field.attribute||field.input,inputNames=void 0!=inputName?[inputName]:field.inputs;if(void 0!=inputNames)for(var l=0;l<inputNames.length;l++){var inputName=inputNames[l];if(element.find("geonode\\:"+inputName).length>0){attributes[attributeName]=element.find("geonode\\:"+inputName).text();break}}}return attributes},geodash.codec.parseGeometry=function(element){var geom=void 0,attribute=element.find("geonode\\:shape");if(0==attribute.length&&(attribute=element.find("geonode\\:the_geom")),attribute.find("gml\\:point").length>0){var coords=attribute.find("gml\\:point").find("gml\\:coordinates").text().split(",");geom=new L.LatLng(parseFloat(coords[1]),parseFloat(coords[0]))}else if(attribute.find("gml\\:multilinestring").length>0){var coords=attribute.find("gml\\:multilinestring").find("gml\\:linestringmember").find("gml\\:linestring").find("gml\\:coordinates").text().split(" ");coords=$.map(coords,function(x,i){var a=x.split(",");return[[parseFloat(a[0]),parseFloat(a[1])]]});var geojson=[{type:"LineString",coordinates:coords}];geom=new L.GeoJSON(geojson,{})}else if(attribute.find("gml\\:multipolygon").length>0){var coords=attribute.find("gml\\:multipolygon").find("gml\\:polygonmember").find("gml\\:polygon").find("gml\\:outerboundaryis").find("gml\\:linearring").find("gml\\:coordinates").text().split(" ");coords=$.map(coords,function(x,i){var a=x.split(",");return[[parseFloat(a[0]),parseFloat(a[1])]]});var ring=[coords],multipolygon=[ring],geojson=[{type:"MultiPolygon",coordinates:multipolygon}];geom=new L.GeoJSON(geojson,{})}return geom},geodash.popup={},geodash.popup.buildChart=function(chart,layer,feature,state){var html="";return html+='<div style="text-align:center;"><b>'+chart.label+"</b></div><br>",html+='<div id="'+chart.id+'" class="geodash-popup-chart"></div>'},geodash.popup.buildField=function(field,layer,feature,state){var output=field.output||field.attribute,html=void 0,bInclude=!1;if(void 0!=field.when&&"defined"==field.when.toLowerCase()?void 0!=feature.attributes[output]&&(bInclude=!0):bInclude=!0,bInclude)if("link"==field.type){var value=void 0!=field.value?field.value:"{{ feature.attributes."+output+" }}";html="<span><b>"+field.label+':</b> <a target="_blank" href="'+field.url+'">',html+=value,html+="</a></span>"}else{var value=void 0;if(void 0!=field.value)value=field.value;else{if("date"==field.type){var format=field.format||"medium";value="feature.attributes."+output+" | date:'"+format+"'"}else value="feature.attributes."+output;field.fallback&&(value="("+value+") || '"+field.fallback+"'"),value="{{ "+value+" }}"}html="<span><b>"+field.label+":</b> "+value+"</span>"}return html},geodash.popup.buildPopupTemplate=function(popup,layer,feature,state){var panes=popup.panes,popupTemplate="";angular.isString(popup.title)&&(popupTemplate+='<h5 style="word-wrap:break-word;text-align:center;">'+popup.title+"</h5>");var paneContents=[];if(Array.isArray(panes)){for(var i=0;i<panes.length;i++){var pane=panes[i],popupFields=[],popupCharts=[];if("fields"in pane)for(var j=0;j<pane.fields.length;j++){var popupField=geodash.popup.buildField(pane.fields[j],layer,feature,state);void 0!=popupField&&popupFields.push(popupField)}if("charts"in pane)for(var j=0;j<pane.charts.length;j++){var popupChart=geodash.popup.buildChart(pane.charts[j],layer,feature,state);void 0!=popupChart&&popupCharts.push(popupChart)}var paneContent=popupFields.join("<br>");popupCharts.length>0&&(paneContent+="<hr>"+popupCharts.join("<br>")),paneContents.push(paneContent)}if(panes.length>1){var tabs=[],pane=panes[0],html_tab='<li class="active"><a data-toggle="tab" href="#'+pane.id+'">'+pane.tab.label+"</a></li>";tabs.push(html_tab);for(var i=1;i<panes.length;i++)pane=panes[i],html_tab='<li><a data-toggle="tab" href="#'+pane.id+'">'+pane.tab.label+"</a></li>",tabs.push(html_tab);var html_tabs='<ul class="nav nav-tabs nav-justified">'+tabs.join("")+"</ul>",paneContentsWithWrapper=[],html_pane='<div id="'+panes[0].id+'" class="tab-pane fade in active">'+paneContents[0]+"</div>";paneContentsWithWrapper.push(html_pane);for(var i=1;i<panes.length;i++)html_pane='<div id="'+panes[i].id+'" class="tab-pane fade">'+paneContents[i]+"</div>",paneContentsWithWrapper.push(html_pane);popupTemplate+=html_tabs+'<div class="tab-content">'+paneContentsWithWrapper.join("")+"</div>"}else popupTemplate+=paneContents[0]}return popupTemplate},geodash.popup.buildPopupContent=function($interpolate,featureLayer,feature,state){var popupTemplate=geodash.popup.buildPopupTemplate(featureLayer.popup,featureLayer,feature,state),ctx={layer:featureLayer,feature:feature,state:state};return $interpolate(popupTemplate)(ctx)},geodash.popup.openPopup=function($interpolate,featureLayer,feature,location,map,state){var popupContent=geodash.popup.buildPopupContent($interpolate,featureLayer,feature,state),popup=new L.Popup({maxWidth:featureLayer.popup.maxWidth||400},(void 0));popup.setLatLng(new L.LatLng(location.lat,location.lon)),popup.setContent(popupContent),map.openPopup(popup)},geodash.tilemath={D2R:Math.PI/180,R2D:180/Math.PI},geodash.tilemath.point_to_bbox=function(x,y,z,digits){var radius=geodash.tilemath.point_to_radius(z),e=x+radius;void 0!=digits&&digits>=0&&(e=e.toFixed(digits));var w=x-radius;void 0!=digits&&digits>=0&&(w=w.toFixed(digits));var s=y-radius;void 0!=digits&&digits>=0&&(s=s.toFixed(digits));var n=y+radius;return void 0!=digits&&digits>=0&&(n=n.toFixed(digits)),[w,s,e,n]},geodash.tilemath.point_to_radius=function(z){return(geodash.config.click_radius||4)/z},geodash.tilemath.tms_to_bbox=function(x,y,z){var e=geodash.tilemath.tile_to_lon(x+1,z),w=geodash.tilemath.tile_to_lon(x,z),s=geodash.tilemath.tile_to_lat(y+1,z),n=geodash.tilemath.tile_to_lat(y,z);return[w,s,e,n]},geodash.tilemath.tile_to_lon=function(x,z){return x/Math.pow(2,z)*360-180},geodash.tilemath.tile_to_lat=function(y,z){return n=Math.pi-2*Math.PI*y/Math.pow(2,z),R2D*Math.atan(.5*(Math.exp(n)-Math.exp(-n)))},geodash.http={},geodash.http.build_promises=function($http,urls){for(var promises=[],i=0;i<urls.length;i++){var url=urls[i],config={},promise=$http.get(url,config);promises.push(promise)}return promises},geodash.http.build_features=function(responses,fields_by_featuretype){for(var features=[],i=0;i<responses.length;i++){var response=responses[i];if(200==response.status){var data=response.data;features=features.concat(geodash.codec.parseFeatures(data,fields_by_featuretype))}}return features},geodash.layers={},geodash.layers.aggregate_fields=function(featureLayer){var fields=[],panes=extract("popup.panes",featureLayer,void 0);if(void 0!=panes)for(var i=0;i<panes.length;i++)fields=fields.concat(panes[i].fields);return fields},geodash.layers.init_baselayers=function(map,baselayers){for(var layers={},i=0;i<baselayers.length;i++){var bl=baselayers[i],type=extract("source.type",bl,"tile"),attribution=extract("source.attribution",bl,void 0),url=void 0;
if("mapbox"==type.toLowerCase()){var mb_layers=extract("source.mapbox.layers",bl,void 0),mb_access_token=extract("source.mapbox.access_token",bl,void 0);void 0==mb_layers||void 0==mb_access_token?console.log("MapBox Layers missing config.",bl):url="http://{s}.tiles.mapbox.com/v4/"+mb_layers+"/{z}/{x}/{y}.png?access_token="+mb_access_token}else if("gwc"==type.toLowerCase()){var gwc_url=extract("source.gwc.url",bl,void 0),gwc_layers=extract("source.gwc.layers",bl,void 0);void 0==gwc_url||void 0==gwc_layers?console.log("GWC Layers missing config.",bl):url=gwc_url+(gwc_url.endsWith("/")?"":"/")+"service/tms/1.0.0/"+gwc_layers+"@EPSG:900913@png/{z}/{x}/{y}.png"}else type.toLowerCase()in["tile","tiles"]&&(url=extract("source.tile.url",bl,void 0));url=url||extract("source.url",bl,void 0);try{layers[bl.id]=L.tileLayer(url,{id:bl.id,attribution:attribution})}catch(err){console.log("Could not add baselayer "+i)}}return layers},geodash.layers.init_featurelayer_post=function($scope,live,id,fl,visible){void 0!=fl?((void 0==visible||visible)&&fl.addTo(live.map),geodash.api.intend("layerLoaded",{type:"featurelayer",layer:id,visible:visible},$scope)):console.log("Could not add featurelayer "+id+" because it is undefined.")},geodash.layers.init_featurelayer_wms=function($scope,live,map_config,id,layerConfig){var w=layerConfig.wms;if("basic"==extract("auth",layerConfig,"")){var auth_url=w.url+(w.url.indexOf("?")!=-1?"&":"?")+"SERVICE=WMS&REQUEST=GetCapabilities";$.ajax({url:auth_url,type:"GET",dataType:"jsonp",jsonp:"callback",beforeSend:function(xhr){xhr.setRequestHeader("Authorization","Basic "+btoa("null:null")),console.log(xhr)},error:function(){},success:function(){},complete:function(response){var options={renderOrder:$.inArray(id,map_config.renderlayers),buffer:w.buffer||0,version:w.version||"1.1.1",layers:geodash.codec.formatArray("layers",w,""),styles:geodash.codec.formatArray("styles",w,""),format:w.format||"image/png",transparent:extract("transparent",w,!0),attribution:extract("source.attribution",layerConfig,void 0)},cql_filter=extract("cql_filter",w,void 0);angular.isDefined(cql_filter)&&(options.CQL_FILTER=cql_filter);var fl=L.tileLayer.wms(w.url,options);live.featurelayers[id]=fl,geodash.layers.init_featurelayer_post($scope,live,id,fl,layerConfig.visible)}})}else{var options={renderOrder:$.inArray(id,map_config.renderlayers),buffer:w.buffer||0,version:w.version||"1.1.1",layers:geodash.codec.formatArray("layers",w,""),styles:geodash.codec.formatArray("styles",w,""),format:w.format||"image/png",transparent:extract("transparent",w,!0),attribution:extract("source.attribution",layerConfig,void 0)},cql_filter=extract("cql_filter",w,void 0);angular.isDefined(cql_filter)&&(options.CQL_FILTER=cql_filter);var fl=L.tileLayer.wms(w.url,options);live.featurelayers[id]=fl,geodash.layers.init_featurelayer_post($scope,live,id,fl,layerConfig.visible)}},geodash.layers.init_featurelayer_wmts=function($scope,live,map_config,id,layerConfig){var w=layerConfig.wmts;if("basic"==extract("auth",layerConfig,"")){var auth_url=w.url+(w.url.indexOf("?")!=-1?"&":"?")+"SERVICE=WMS&REQUEST=GetCapabilities";$.ajax({url:auth_url,type:"GET",dataType:"jsonp",jsonp:"callback",beforeSend:function(xhr){xhr.setRequestHeader("Authorization","Basic "+btoa("null:null"))},error:function(){},success:function(){},complete:function(response){var fl=L.tileLayer.wmts(w.url,{renderOrder:$.inArray(id,map_config.renderlayers),version:w.version||"1.0.0",layers:geodash.codec.formatArray("layers",w,""),styles:geodash.codec.formatArray("styles",w,""),format:w.format||"image/png",transparent:!angular.isDefined(w.transparent)||w.transparent,attribution:extract("source.attribution",layerConfig,void 0),tilematrixSet:"EPSG:3857",minZoom:extract("view.minZoom",layerConfig,0),maxZoom:extract("view.maxZoom",layerConfig,18),maxNativeZoom:extract("source.maxZoom",layerConfig,null)});live.featurelayers[id]=fl,geodash.layers.init_featurelayer_post($scope,live,id,fl,layerConfig.visible)}})}else{var fl=L.tileLayer.wmts(w.url,{renderOrder:$.inArray(id,map_config.renderlayers),version:w.version||"1.0.0",layers:geodash.codec.formatArray("layers",w,""),styles:geodash.codec.formatArray("styles",w,""),format:w.format||"image/png",transparent:!angular.isDefined(w.transparent)||w.transparent,attribution:extract("source.attribution",layerConfig,void 0),tilematrixSet:"EPSG:3857",minZoom:extract("view.minZoom",layerConfig,0),maxZoom:extract("view.maxZoom",layerConfig,18),maxNativeZoom:extract("source.maxZoom",layerConfig,null)});live.featurelayers[id]=fl,geodash.layers.init_featurelayer_post($scope,live,id,fl,layerConfig.visible)}},geodash.layers.init_featurelayer_geojson=function($scope,live,map_config,id,layerConfig){var url=extract("geojson.url",layerConfig)||extract("source.url",layerConfig)||extract("url",layerConfig);$.ajax({url:url,dataType:"json",success:function(response){var fl=void 0;if("heatmap"==layerConfig.transform){for(var heatLayerData=[],maxIntensity=0,i=0;i<response[0].features.length;i++){var intensity="attribute"in layerConfig.heatmap&&""!=layerConfig.heatmap.attribute?response[0].features[i].properties[layerConfig.heatmap.attribute]:1;heatLayerData.push([response[0].features[i].geometry.coordinates[1],response[0].features[i].geometry.coordinates[0],intensity]),intensity>maxIntensity&&(maxIntensity=intensity)}for(var i=0;i<heatLayerData.length;i++)heatLayerData[i][2]=heatLayerData[i][2]/maxIntensity;var canvas=L.heatCanvas();fl=L.heatLayer(heatLayerData,{renderer:canvas,attribution:layerConfig.source.attribution,radius:layerConfig.heatmap.radius||25,blur:layerConfig.heatmap.blur||15,max:layerConfig.heatmap.max||1,minOpacity:layerConfig.heatmap.minOpacity||.5})}else fl=L.geoJson(response,{attribution:layerConfig.source.attribution});live.featurelayers[id]=fl,geodash.layers.init_featurelayer_post($scope,live,id,fl,layerConfig.visible)}})},geodash.layers.init_featurelayer=function(id,layerConfig,$scope,live,map_config){if(void 0==layerConfig.enabled||1==layerConfig.enabled){var t=extract("type",layerConfig,"").toLowerCase();"geojson"==t?geodash.layers.init_featurelayer_geojson($scope,live,map_config,id,layerConfig):"wms"==t?geodash.layers.init_featurelayer_wms($scope,live,map_config,id,layerConfig):"wmts"==t&&geodash.layers.init_featurelayer_wmts($scope,live,map_config,id,layerConfig)}},geodash.layers.init_featurelayers=function(featureLayers,$scope,live,map_config){$.each(featureLayers,function(i,layerConfig){geodash.layers.init_featurelayer(layerConfig.id,layerConfig,$scope,live,map_config)})};var sparc={};sparc.welcome=function(options){options=options||{};var scope=options.$scope||options.scope||angular.element("#geodash-main").scope(),intentData={id:"geodash-modal-sparc-welcome",modal:{backdrop:"static",keyboard:!1},dynamic:{},"static":{welcome:extract("welcome",scope.config||scope.map_config)}};geodash.api.intend("toggleModal",intentData,scope)},sparc.html5data=function(){var args=arguments,zero_lc=args[0].toLowerCase();if("togglemodal"==zero_lc||"showmodal"==zero_lc){var id=args[1];if("geodash-modal-layer-more"==id){var layerType=args[2],layer=args[3];return{id:id,"static":{layerID:layer.id},dynamic:{layer:[layerType,layer.id]}}}return""}return"hidemodal"==zero_lc?{id:args[1]}:""},geodash.vam_filter_fcs=function(value,filters,f){if(void 0!=filters.fcs){var fcs_modifier=100;if(0==filters.fcs.length)fcs_modifier=0;else if("poor,borderline,acceptable"!=filters.fcs.join(",")){console.log("FCS Filter:",filters.fcs);var admin1_code=f.attributes.admin1_code,matches=$.grep(geodash.initial_data.layers.vam.data.geojson.features,function(x,i){return x.properties.admin1_code==admin1_code});if(matches.length>0){var match=matches[0];void 0!=match.properties.vam.fcs&&(fcs_modifier=0,$.each(match.properties.vam.fcs,function(k,v){$.inArray(k,filters.fcs)!=-1&&(fcs_modifier+=v)}))}}value*=fcs_modifier/100}return value},geodash.vam_filter_csi=function(value,filters,f){if(void 0!=filters.csi){var csi_modifier=100;if(0==filters.csi.length)csi_modifier=0;else if("no,low,medium,high"!=filters.csi.join(",")){var admin1_code=f.attributes.admin1_code,matches=$.grep(geodash.initial_data.layers.vam.data.geojson.features,function(x,i){return x.properties.admin1_code==admin1_code});if(matches.length>0){var match=matches[0];void 0!=match.properties.vam.csi&&(csi_modifier=0,$.each(match.properties.vam.csi,function(k,v){$.inArray(k,filters.csi)!=-1&&(csi_modifier+=v)}))}}value*=csi_modifier/100}return value},sparc.calculate_population_at_risk=function(hazard,feature,state,filters){var value=0,month_short3=months_short_3[state.month-1];if("cyclone"==hazard)for(var prob_class_max=state.filters.popatrisk.prob_class_max,category=state.filters.popatrisk.category,i=0;i<feature.attributes.addinfo.length;i++){var a=feature.attributes.addinfo[i];a.category==category&&a.prob_class_max>=prob_class_max&&(console.log("matched prob_class",prob_class_max),value+=a[month_short3])}else if("drought"==hazard)for(var prob_class_max=state.filters.popatrisk.prob_class_max,i=0;i<feature.attributes.addinfo.length;i++){var a=feature.attributes.addinfo[i];a.prob_class_max>=prob_class_max&&(value+=a[month_short3])}else if("flood"==hazard){var rp=state.filters.popatrisk.rp;value=feature.attributes["RP"+rp.toString(10)][month_short3]}else if("landslide"==hazard)for(var prob_class_max=state.filters.popatrisk.prob_class_max,i=0;i<feature.attributes.addinfo.length;i++){var a=feature.attributes.addinfo[i];a.prob_class_max>=prob_class_max&&(value+=a[month_short3])}return void 0!=filters&&$.each(filters,function(i,x){value=geodash[x](value,state.filters.popatrisk,feature)}),value};var buildGroupsAndColumnsForCountry=function(chartConfig,popatrisk_config){var groups=[[]],columns=[],order=void 0;if("cyclone"==chartConfig.hazard)$.each(popatrisk_config.data.summary.prob_class,function(prob_class,value){var data=value.by_month;columns.push([prob_class].concat(data)),groups[0].push(prob_class)}),groups[0].sort(function(a,b){return parseFloat(b.split("-")[0])-parseFloat(a.split("-")[0])}),columns.sort(function(a,b){return parseFloat(a[0].split("-")[0])-parseFloat(b[0].split("-")[0])}),order=function(data1,data2){return parseFloat(data2.id.split("-")[0])-parseFloat(data1.id.split("-")[0])};else if("drought"==chartConfig.hazard)$.each(popatrisk_config.data.summary.prob_class,function(prob_class,value){var data=value.by_month;columns.push([prob_class].concat(data)),groups[0].push(prob_class)}),groups[0].sort(function(a,b){return parseFloat(b.split("-")[0])-parseFloat(a.split("-")[0])}),columns.sort(function(a,b){return parseFloat(a[0].split("-")[0])-parseFloat(b[0].split("-")[0])}),order=function(data1,data2){return parseFloat(data2.id.split("-")[0])-parseFloat(data1.id.split("-")[0])};else if("flood"==chartConfig.hazard){for(var i=0;i<chartConfig.groups.length;i++){var group_prefix=chartConfig.group_prefix,group_key=chartConfig.group_key,g=chartConfig.groups[i],group_modifier=chartConfig.group_modifier,data=popatrisk_config.data.summary[group_key][""+g*group_modifier].by_month;columns.push([group_prefix+g].concat(data)),groups[0].push(group_prefix+g)}columns.reverse()}else if("landslide"==chartConfig.hazard){var landslideClasses=["low","medium","high","very_high"];$.each(popatrisk_config.data.summary.prob_class,function(prob_class,value){var data=value.by_month;columns.push([prob_class].concat(data)),groups[0].push(prob_class)}),groups[0].sort(function(a,b){return landslideClasses.indexOf(b)-landslideClasses.indexOf(a)}),columns.sort(function(a,b){return landslideClasses.indexOf(a[0])-landslideClasses.indexOf(b[0])}),order=function(data1,data2){return landslideClasses.indexOf(data2.id)-landslideClasses.indexOf(data1.id)}}return{groups:groups,columns:columns,order:order}},buildGroupsAndColumnsForAdmin2=function(chartConfig,popatrisk_config,admin2_code){var groups=[[]],columns=[],order=void 0;if("cyclone"==chartConfig.hazard)$.each(popatrisk_config.data.summary.admin2[admin2_code].prob_class,function(prob_class,value){var data=value.by_month;columns.push([prob_class].concat(data)),groups[0].push(prob_class)}),groups[0].sort(function(a,b){return parseFloat(b.split("-")[0])-parseFloat(a.split("-")[0])}),columns.sort(function(a,b){return parseFloat(a[0].split("-")[0])-parseFloat(b[0].split("-")[0])}),order=function(data1,data2){return parseFloat(data2.id.split("-")[0])-parseFloat(data1.id.split("-")[0])};else if("drought"==chartConfig.hazard)$.each(popatrisk_config.data.summary.admin2[admin2_code].prob_class,function(prob_class,value){var data=value.by_month;columns.push([prob_class].concat(data)),groups[0].push(prob_class)}),groups[0].sort(function(a,b){return parseFloat(b.split("-")[0])-parseFloat(a.split("-")[0])}),columns.sort(function(a,b){return parseFloat(a[0].split("-")[0])-parseFloat(b[0].split("-")[0])}),order=function(data1,data2){return parseFloat(data2.id.split("-")[0])-parseFloat(data1.id.split("-")[0])};else if("flood"==chartConfig.hazard){for(var i=0;i<chartConfig.returnPeriods.length;i++){var rp=chartConfig.returnPeriods[i],data=popatrisk_config.data.summary.admin2[admin2_code].rp[""+rp].by_month;columns.push(["rp"+rp].concat(data)),groups[0].push("rp"+rp)}columns.reverse()}else if("landslide"==chartConfig.hazard){$.each(popatrisk_config.data.summary.admin2[admin2_code].prob_class,function(prob_class,value){var data=value.by_month;columns.push([prob_class].concat(data)),groups[0].push(prob_class)});var landslideClasses=["low","medium","high","very_high"];groups[0].sort(function(a,b){return landslideClasses.indexOf(b)-landslideClasses.indexOf(a)}),columns.sort(function(a,b){return landslideClasses.indexOf(a[0])-landslideClasses.indexOf(b[0])}),order=function(data1,data2){return landslideClasses.indexOf(data2.id)-landslideClasses.indexOf(data1.id)}}return{groups:groups,columns:columns,order:order}},buildHazardChart=function(chartConfig,popatrisk_config,options){var gc=void 0;if("bar"==chartConfig.type){gc=void 0!=options&&void 0!=options.groups&&void 0!=options.columns?{groups:options.groups,columns:options.columns,order:void 0}:buildGroupsAndColumnsForCountry(chartConfig,popatrisk_config);var barConfig=void 0;"bullet"==chartConfig.subtype?(barConfig={bullet:!0,width:function(d,i){return"rp25"==d.id?8:16},offset:function(d,i){return 0}},void 0!=options&&void 0!=options.bullet_width&&(barConfig.width=options.bullet_width)):barConfig={width:{ratio:.6}};var axisConfig={x:{},y:{}};void 0!=chartConfig.axis&&void 0!=chartConfig.axis.x&&"months"==chartConfig.axis.x.type&&(axisConfig.x.tick={format:function(x){return months_short_3[x].toTitleCase()}}),axisConfig.y.label=chartConfig.axis.y.label,axisConfig.y.tick={format:d3.format("s,")};c3.generate({bindto:"#"+(chartConfig.element||chartConfig.id),data:{columns:gc.columns,groups:gc.groups,type:"bar",colors:chartConfig.colors,order:gc.order||"desc"},axis:axisConfig,bar:barConfig})}};geodash.config={click_radius:2},geodash.init_country=function(appName){var context=$.grep(geodash.map_config.featurelayers,function(x,i){return"context"==x.id})[0],url_context_summary=context.urls.summary.replace("{iso3}",geodash.initial_state.iso3),url_context_geojson=context.urls.geojson.replace("{iso3}",geodash.initial_state.iso3),vam=$.grep(geodash.map_config.featurelayers,function(x,i){return"vam"==x.id})[0],url_vam_geojson=vam.urls.geojson.replace("{iso3}",geodash.initial_state.iso3);$.when($.ajax({dataType:"json",url:url_context_summary}),$.ajax({dataType:"json",url:url_context_geojson}),$.ajax({dataType:"json",url:url_vam_geojson})).done(function(response_context_summary,response_context_geojson,response_vam_geojson){geodash.initial_data.layers.context.data.summary=response_context_summary[0],geodash.initial_data.layers.context.data.geojson=response_context_geojson[0],geodash.initial_data.layers.vam.data.geojson=response_vam_geojson[0],geodash.breakpoints={},$.each(geodash.initial_data.layers.context.data.summary.all.breakpoints,function(k,v){geodash.breakpoints["context_"+k]=v}),geodash.init_country_main_app(appName)})},geodash.init_country_main_app=function(appName){geodash.app=app=angular.module(appName,["ngRoute","ngSanitize"]),geodash.init.templates(app),geodash.init.filters(app),geodash.init.directives(app),app.factory("state",function(){return $.extend({},geodash.initial_state)}),app.factory("stateschema",function(){return $.extend({},geodash.state_schema)}),app.factory("map_config",function(){return $.extend({},geodash.map_config)}),app.factory("live",function(){return{map:void 0,baselayers:{},featurelayers:{popatrisk:void 0}}}),geodash.init.listeners(),geodash.init_controller_base(app);var mainController=$("#geodash-main");init_sparc_controller_main(mainController,app),angular.bootstrap(document,[appName])},geodash.init_countryhazardmonth=function(appName){var popatrisk=$.grep(geodash.map_config.featurelayers,function(x,i){return"popatrisk"==x.id})[0],url_popatrisk_summary=popatrisk.sparc.summary.replace("{iso3}",geodash.initial_state.iso3).replace("{hazard}",geodash.initial_state.hazard),url_popatrisk_geojson=popatrisk.geojson.url.replace("{iso3}",geodash.initial_state.iso3).replace("{hazard}",geodash.initial_state.hazard),context=$.grep(geodash.map_config.featurelayers,function(x,i){return"context"==x.id})[0],url_context_summary=context.sparc.summary.replace("{iso3}",geodash.initial_state.iso3),url_context_geojson=context.geojson.url.replace("{iso3}",geodash.initial_state.iso3),vam=$.grep(geodash.map_config.featurelayers,function(x,i){return"vam"==x.id})[0],url_vam_geojson=vam.geojson.url.replace("{iso3}",geodash.initial_state.iso3);$.when($.ajax({dataType:"json",url:url_popatrisk_summary}),$.ajax({dataType:"json",url:url_popatrisk_geojson}),$.ajax({dataType:"json",url:url_context_summary}),$.ajax({dataType:"json",url:url_context_geojson}),$.ajax({dataType:"json",url:url_vam_geojson})).done(function(response_popatrisk_summary,response_popatrisk_geojson,response_context_summary,response_context_geojson,response_vam_geojson){geodash.initial_data.layers.popatrisk.data.summary=response_popatrisk_summary[0],geodash.initial_data.layers.popatrisk.data.geojson=response_popatrisk_geojson[0],geodash.initial_data.layers.context.data.summary=response_context_summary[0],geodash.initial_data.layers.context.data.geojson=response_context_geojson[0],geodash.initial_data.layers.vam.data.geojson=response_vam_geojson[0],geodash.breakpoints={},"all"in geodash.initial_data.layers.popatrisk.data.summary&&$.each(geodash.initial_data.layers.popatrisk.data.summary.all.breakpoints,function(k,v){geodash.breakpoints["popatrisk_"+k]=v}),"all"in geodash.initial_data.layers.context.data.summary&&$.each(geodash.initial_data.layers.context.data.summary.all.breakpoints,function(k,v){geodash.breakpoints["context_"+k]=v}),geodash.init_countryhazardmonth_main_app(appName)})},geodash.init_countryhazardmonth_main_app=function(appName){geodash.app=app=angular.module(appName,["ngRoute","ngSanitize","ngCookies"]),geodash.init.templates(app),geodash.init.filters(app),geodash.init.directives(app),app.factory("state",function(){return $.extend({},geodash.initial_state)}),app.factory("stateschema",function(){return $.extend({},geodash.state_schema)}),app.factory("map_config",function(){return $.extend({},geodash.map_config)}),app.factory("live",function(){return{map:void 0,baselayers:{},featurelayers:{popatrisk:void 0}}}),geodash.init.listeners(),geodash.init_controller_base(app);var mainController=$("#geodash-main");init_sparc_controller_main(mainController,app),angular.bootstrap(document,[appName])},geodash.init_explore=function(appName){geodash.app=app=angular.module(appName,["ngRoute","ngSanitize"]),geodash.init.templates(app),geodash.init.filters(app),geodash.init.directives(app),app.factory("state",function(){return $.extend({},geodash.initial_state)}),app.factory("stateschema",function(){return $.extend({},geodash.state_schema)}),app.factory("map_config",function(){return $.extend({},geodash.map_config)}),app.factory("live",function(){return{map:void 0,baselayers:{},featurelayers:{}}}),geodash.init.listeners(),geodash.init_controller_base(app);var mainController=$("#geodash-main");init_sparc_controller_main(mainController,app),angular.bootstrap(document,[appName])};var init_sparc_controller=function(that,app){var controllerName=that.data("controllerName");that.data("controllerType");app.controller(controllerName,function($scope,$element){init_intents($($element),$scope)})};geodash.style_cyclone=function(f,state,map_config,options){var fl=geodash.api.getFeatureLayer("popatrisk"),style={},filters=state.filters.popatrisk,popatrisk_range=filters.popatrisk_range,ldi_range=filters.ldi_range,ldi=f.properties.ldi,erosion_propensity_range=filters.erosion_propensity_range,erosion_propensity=f.properties.erosion_propensity,landcover_delta_negative_range=filters.landcover_delta_negative_range,landcover_delta_negative=f.properties.delta_negative,value=sparc.calculate_population_at_risk("cyclone",geodash.api.normalize_feature(f),state,options.filters);if(value>=popatrisk_range[0]&&value<=popatrisk_range[1]&&(void 0==ldi||ldi>=ldi_range[0]&&ldi<=ldi_range[1])&&(void 0==erosion_propensity||erosion_propensity>=erosion_propensity_range[0]&&erosion_propensity<=erosion_propensity_range[1])&&(void 0==landcover_delta_negative||landcover_delta_negative>=landcover_delta_negative_range[0]&&landcover_delta_negative<=landcover_delta_negative_range[1])){for(var colors=fl.cartography[0].colors.ramp,breakpoints=geodash.breakpoints[options.breakpoints],color=void 0,i=0;i<breakpoints.length-1;i++)if(value==breakpoints[i]&&value==breakpoints[i+1]||value>=breakpoints[i]&&value<breakpoints[i+1]){color=colors[i];break}style.fillColor=void 0==color?colors[colors.length-1]:color}else style.opacity=0,style.fillOpacity=0;return style},geodash.style_drought=function(f,state,map_config,options){var fl=geodash.api.getFeatureLayer("popatrisk"),style={},filters=state.filters.popatrisk,popatrisk_range=filters.popatrisk_range,ldi_range=filters.ldi_range,ldi=f.properties.ldi,erosion_propensity_range=filters.erosion_propensity_range,erosion_propensity=f.properties.erosion_propensity,landcover_delta_negative_range=filters.landcover_delta_negative_range,landcover_delta_negative=f.properties.delta_negative,value=sparc.calculate_population_at_risk("drought",geodash.api.normalize_feature(f),state,options.filters);if(value>=popatrisk_range[0]&&value<=popatrisk_range[1]&&(void 0==ldi||ldi>=ldi_range[0]&&ldi<=ldi_range[1])&&(void 0==erosion_propensity||erosion_propensity>=erosion_propensity_range[0]&&erosion_propensity<=erosion_propensity_range[1])&&(void 0==landcover_delta_negative||landcover_delta_negative>=landcover_delta_negative_range[0]&&landcover_delta_negative<=landcover_delta_negative_range[1])){for(var colors=fl.cartography[0].colors.ramp,breakpoints=geodash.breakpoints[options.breakpoints],color=void 0,i=0;i<breakpoints.length-1;i++)if(value==breakpoints[i]&&value==breakpoints[i+1]||value>=breakpoints[i]&&value<breakpoints[i+1]){color=colors[i];break}style.fillColor=void 0==color?colors[colors.length-1]:color}else style.opacity=0,style.fillOpacity=0;return style},geodash.style_flood=function(f,state,map_config,options){var fl=geodash.api.getFeatureLayer("popatrisk"),style={},filters=state.filters.popatrisk,popatrisk_range=filters.popatrisk_range,ldi_range=filters.ldi_range,ldi=f.properties.ldi,erosion_propensity_range=filters.erosion_propensity_range,erosion_propensity=f.properties.erosion_propensity,landcover_delta_negative_range=filters.landcover_delta_negative_range,landcover_delta_negative=f.properties.delta_negative,value=sparc.calculate_population_at_risk("flood",geodash.api.normalize_feature(f),state,options.filters);if(value>=popatrisk_range[0]&&value<=popatrisk_range[1]&&(void 0==ldi||ldi>=ldi_range[0]&&ldi<=ldi_range[1])&&(void 0==erosion_propensity||erosion_propensity>=erosion_propensity_range[0]&&erosion_propensity<=erosion_propensity_range[1])&&(void 0==landcover_delta_negative||landcover_delta_negative>=landcover_delta_negative_range[0]&&landcover_delta_negative<=landcover_delta_negative_range[1])){for(var colors=fl.cartography[0].colors.ramp,breakpoints=geodash.breakpoints[options.breakpoints],color=void 0,i=0;i<breakpoints.length-1;i++)if(value==breakpoints[i]&&value==breakpoints[i+1]||value>=breakpoints[i]&&value<breakpoints[i+1]){color=colors[i];break}style.fillColor=void 0==color?colors[colors.length-1]:color}else style.opacity=0,style.fillOpacity=0;return style},geodash.style_landslide=function(f,state,map_config,options){var fl=geodash.api.getFeatureLayer("popatrisk"),style={},filters=state.filters.popatrisk,popatrisk_range=filters.popatrisk_range,ldi_range=filters.ldi_range,ldi=f.properties.ldi,erosion_propensity_range=filters.erosion_propensity_range,erosion_propensity=f.properties.erosion_propensity,landcover_delta_negative_range=filters.landcover_delta_negative_range,landcover_delta_negative=f.properties.delta_negative,value=sparc.calculate_population_at_risk("landslide",geodash.api.normalize_feature(f),state,options.filters);if(value>=popatrisk_range[0]&&value<=popatrisk_range[1]&&(void 0==ldi||ldi>=ldi_range[0]&&ldi<=ldi_range[1])&&(void 0==erosion_propensity||erosion_propensity>=erosion_propensity_range[0]&&erosion_propensity<=erosion_propensity_range[1])&&(void 0==landcover_delta_negative||landcover_delta_negative>=landcover_delta_negative_range[0]&&landcover_delta_negative<=landcover_delta_negative_range[1])){for(var colors=fl.cartography[0].colors.ramp,breakpoints=geodash.breakpoints[options.breakpoints],color=void 0,i=0;i<breakpoints.length-1;i++)if(value==breakpoints[i]&&value==breakpoints[i+1]||value>=breakpoints[i]&&value<breakpoints[i+1]){color=colors[i];break}style.fillColor=void 0==color?colors[colors.length-1]:color}else style.opacity=0,style.fillOpacity=0;return style},geodash.style_context=function(f,state,map_config,options){var fl=geodash.api.getFeatureLayer("context"),style={},currentStyleID=(state.filters.context,state.styles.context),currentStyleList=$.grep(fl.cartography,function(style,i){return style.id==currentStyleID}),currentStyle=1==currentStyleList.length?currentStyleList[0]:fl.cartography[0],colorize=!0;if("mask"in currentStyle&&(1==f.properties[currentStyle.mask]?colorize=!0:(style.fillColor=currentStyle.colors.outside,colorize=!1)),colorize){for(var value=f.properties[currentStyle.attribute],colors=currentStyle.colors.ramp,breakPointsName=currentStyle.breakpoints||"natural_adjusted",breakpoints=geodash.initial_data.layers.context.data.summary.all.breakpoints[breakPointsName],color=void 0,i=0;i<breakpoints.length-1;i++)if(value==breakpoints[i]&&value==breakpoints[i+1]||value>=breakpoints[i]&&value<breakpoints[i+1]){color=colors[i];break}style.fillColor=void 0==color?colors[colors.length-1]:color}return style},geodash.meta={},geodash.meta.projects=[{name:"geodash",version:"0.0.1",description:"geodash 0.0.1"},{name:"sparc2",version:"0.0.1",description:"SPARC 2.x"}],geodash.meta.plugins=[{controllers:["GeoDashControllerBase.js","GeoDashControllerModal.js"],directives:["svg.js","onLinkDone.js","onRepeatDone.js","geodashBtnClose.js","geodashBtnInfo.js","geodashBtn.js","geodashLabel.js","geodashTab.js","geodashTabs.js"],enumerations:["dates.js"],templates:["geodash_tab.tpl.html","geodash_tabs.tpl.html","geodash_btn_close.tpl.html","geodash_btn_info.tpl.html","geodash_btn.tpl.html","geodash_label.tpl.html"],filters:["default.js","md2html.js","percent.js","tabLabel.js","as_float.js","add.js","title.js","as_array.js","sortItemsByArray.js","breakpoint.js","breakpoints.js","position_x.js","width_x.js","length.js","layer_is_visible.js","common/append.js","common/default_if_undefined.js","common/default_if_undefined_or_blank.js","common/extract.js","common/extractTest.js","common/inArray.js","common/not.js","common/prepend.js","common/parseTrue.js","common/ternary.js","common/ternary_defined.js","common/yaml.js","array/join.js","array/first.js","array/last.js","array/choose.js","format/formatBreakPoint.js","format/formatFloat.js","format/formatInteger.js","format/formatArray.js","format/formatMonth.js","math/eq.js","math/lte.js","math/gte.js","math/gt.js","string/replace.js","string/split.js","url/url_shapefile.js","url/url_geojson.js","url/url_kml.js","url/url_describefeaturetype.js"],handlers:["clickedOnMap.js","hideLayer.js","hideLayers.js","layerLoaded.js","requestToggleComponent.js","showLayer.js","showLayers.js","switchBaseLayer.js","toggleComponent.js","zoomToLayer.js"],schemas:["base.yml","baselayers.yml","featurelayers.yml","controls.yml","view.yml","pages.yml"],modals:[],project:"geodash",id:"base"},{controllers:["controller_legend.js"],directives:["geodashModalLayerCarto.js","geodashModalLayerMore.js","geodashModalLayerConfig.js","geodashSymbolCircle.js","geodashSymbolEllipse.js","geodashSymbolGraduated.js","geodashSymbolGraphic.js","geodashLegendBaselayers.js","geodashLegendFeaturelayers.js"],templates:["modal/geodash_modal_layer_carto.tpl.html","modal/geodash_modal_layer_more.tpl.html","modal/geodash_modal_layer_config.tpl.html","symbol/symbol_circle.tpl.html","symbol/symbol_ellipse.tpl.html","symbol/symbol_graduated.tpl.html","symbol/symbol_graphic.tpl.html","legend_baselayers.tpl.html","legend_featurelayers.tpl.html"],less:["legend.less"],schemas:["legend_schema.yml"],project:"geodash",id:"legend"},{controllers:[],directives:["geodashModalWelcome.js"],templates:["modal/geodash_modal_welcome.tpl.html"],project:"geodash",id:"welcome"},{controllers:[],directives:["geodashModalAbout.js"],templates:["geodash_modal_about.tpl.html"],project:"geodash",id:"about"},{controllers:[],directives:["geodashModalDownload.js"],templates:["geodash_modal_download.tpl.html"],project:"geodash",id:"download"},{controllers:[],directives:["geodashMapOverlays.js"],templates:["map_overlays.tpl.html"],less:["map_overlays.less"],schemas:["map_overlays_schema.yml"],project:"geodash",id:"overlays"},{controllers:[],directives:["geodashSidebarToggleLeft.js"],templates:["geodash_sidebar_toggle_left.tpl.html"],project:"geodash",id:"sidebar_toggle_left"},{controllers:[],directives:["geodashSidebarToggleRight.js"],templates:["geodash_sidebar_toggle_right.tpl.html"],project:"geodash",id:"sidebar_toggle_right"},{controllers:["controller_breadcrumb.js"],directives:["geodashBreadcrumbs.js"],enumerations:["breadcrumbs.js"],templates:["breadcrumbs.tpl.html"],less:["breadcrumbs.less"],project:"sparc2",id:"breadcrumbs"},{controllers:["controller_calendar.js"],directives:["geodashCalendar.js"],templates:["calendar.tpl.html"],less:["calendar.less"],project:"sparc2",id:"calendar"},{controllers:["controller_filter.js"],directives:["geodashModalFilterMore.js","geodashFilterCheckbox.js","geodashFilterRadio.js","geodashFilterSlider.js","geodashFilterContainer.js"],templates:["modal/modal_filter_more.tpl.html","filter/filter_checkbox.tpl.html","filter/filter_radio.tpl.html","filter/filter_slider.tpl.html","filter_container.tpl.html"],less:["filter.less"],project:"sparc2",id:"filter"},{controllers:[{name:"controller_map_map",path:"controller_map_map.js",handlers:[{event:"toggleComponent",handler:"toggleComponent"}]}],directives:[],templates:[],less:["main_map.less"],project:"sparc2",id:"map_map"},{controllers:["controller_sparc_sidebar.js"],directives:["sparcSidebar.js","sparcSidebarFeatureLayer.js"],templates:["sparc_sidebar.tpl.html","sparc_sidebar_featurelayer.tpl.html"],less:["sidebar.less","sidebar-toggle.less"],project:"sparc2",id:"sparc_sidebar"},{controllers:[{name:"controller_main",path:"controller_main.js",handlers:[{event:"clickedOnMap",handler:"clickedOnMap"},{event:"filterChanged",handler:"filterChanged"},{event:"hideLayer",handler:"hideLayer"},{event:"hideLayers",handler:"hideLayers"},{event:"layerLoaded",handler:"layerLoaded"},{event:"requestToggleComponent",handler:"requestToggleComponent"},{event:"selectStyle",handler:"selectStyle"},{event:"showLayer",handler:"showLayer"},{event:"showLayers",handler:"showLayers"},{event:"stateChanged",
handler:"stateChanged"},{event:"switchBaseLayer",handler:"switchBaseLayer"},{event:"viewChanged",handler:"viewChanged"},{event:"zoomToLayer",handler:"zoomToLayer"}]}],directives:[],templates:[],handlers:["filterChanged.js","selectStyle.js","stateChanged.js","viewChanged.js"],project:"sparc2",id:"main"},{controllers:["SPARCControllerModalWelcome.js"],directives:["sparcModalWelcome.js"],templates:["sparc_modal_welcome.tpl.html"],less:["sparc_welcome.less"],modals:[{name:"sparc_welcome",ui:{mainClass:"",tabs:[{target:"modal-sparc-welcome-intro",label:"Introduction"},{target:"modal-sparc-welcome-about",label:"About"}]}}],project:"sparc2",id:"sparc_welcome"}],geodash.meta.controllers=[{name:"controller_map_map",handlers:[{event:"toggleComponent",handler:"toggleComponent"}]},{name:"controller_main",handlers:[{event:"clickedOnMap",handler:"clickedOnMap"},{event:"filterChanged",handler:"filterChanged"},{event:"hideLayer",handler:"hideLayer"},{event:"hideLayers",handler:"hideLayers"},{event:"layerLoaded",handler:"layerLoaded"},{event:"requestToggleComponent",handler:"requestToggleComponent"},{event:"selectStyle",handler:"selectStyle"},{event:"showLayer",handler:"showLayer"},{event:"showLayers",handler:"showLayers"},{event:"stateChanged",handler:"stateChanged"},{event:"switchBaseLayer",handler:"switchBaseLayer"},{event:"viewChanged",handler:"viewChanged"},{event:"zoomToLayer",handler:"zoomToLayer"}]}],geodash.meta.modals=[{name:"sparc_welcome",ui:{mainClass:"",tabs:[{target:"modal-sparc-welcome-intro",label:"Introduction"},{target:"modal-sparc-welcome-about",label:"About"}]}}],geodash.templates={},geodash.templates["geodash_tab.tpl.html"]='<li\n  role="presentation"\n  ng-class="(active && active != \'false\') ? \'active\' : \'\'">\n  <a\n    href="#{{ target }}"\n    aria-controls="{{ target }}"\n    role="tab"\n    data-toggle="tab"\n    style="padding-left:8px; padding-right: 8px; height: {{ height | default_if_undefined : \'auto\'}}">{{ label }}</a>\n</li>\n',geodash.templates["geodash_tabs.tpl.html"]='<ul class="nav nav-tabs nav-justified" role="tablist">\n  <li\n    ng-repeat="x in ui.tabs track by $index"\n    role="presentation"\n    ng-class="$first ? \'active\' : \'\'">\n    <a\n      href="#{{ x.target }}"\n      aria-controls="{{ x.target }}"\n      role="tab"\n      data-toggle="tab"\n      style="padding-left:8px; padding-right: 8px; height: {{ height | default_if_undefined : \'auto\'}}">{{ x.label }}</a>\n  </li>\n</ul>\n',geodash.templates["geodash_btn_close.tpl.html"]='<button\n  type="button"\n  class="close"\n  data-dismiss="{{ dismiss | default_if_undefined: \'modal\' }}"\n  aria-hidden="true"><i class="fa fa-times"></i></button>\n',geodash.templates["geodash_btn_info.tpl.html"]='<div\n  class="input-group-addon btn btn-primary"\n  data-toggle="tooltip"\n  data-placement="{{ placement | default_if_undefined : \'left\' }}"\n  ng-attr-title="{{ info }}">\n  <i class="fa fa-info-circle"></i>\n</div>\n',geodash.templates["geodash_btn.tpl.html"]="<div\n  ng-class=\"['input-group-addon','btn',('btn-'|add: mode),((mode == 'clear' || mode =='off') ? 'btn-danger': ''),((mode == 'on') ? 'btn-success': ''),((mode == 'edit') ? 'btn-primary btn-edit': '')]\"\n  data-target=\"{{ target }}\"\n  data-toggle=\"{{ info | ternary_defined : 'tooltip' : undefined }}\"\n  data-placement=\"{{ placement | default_if_undefined : 'left' }}\"\n  ng-attr-title=\"{{ info }}\">\n  <i ng-class=\"['fa',(mode == 'clear' ? 'fa-times' : ''),(mode == 'on' ? 'fa-check' : ''),(mode == 'off' ? 'fa-circle-o' : ''),(mode == 'edit' ? 'fa-pencil-square-o' : '')]\"></i>\n</div>\n",geodash.templates["geodash_label.tpl.html"]='<label for="{{ target }}" class="col-sm-3 control-label" ng-bind-html="content"></label>\n',geodash.templates["geodash_modal_layer_carto.tpl.html"]='<div class="modal-dialog" role="document">\n  <div class="modal-content">\n    <div class="modal-header">\n      <button geodash-btn-close></button>\n      <h4 class="modal-title" id="myModalLabel">Layer / {{ layer.title }} / Cartography</h4>\n    </div>\n    <div class="modal-body">\n      <div>\n        <!-- Nav tabs -->\n        <ul class="nav nav-tabs" role="tablist">\n          <p class="navbar-text" style="margin-bottom:0px;"><b>Select</b><br><b>a Style:</b></p>\n          <li\n            role="presentation"\n            ng-class="$first ? \'active\' : \'\'"\n            ng-repeat="style in layer.cartography track by $index">\n            <a\n              class="geodash-intent"\n              href="#modal-layer-carto-style-{{ style.id }}"\n              aria-controls="modal-layer-carto-style-{{ style.id }}"\n              data-intent-name="selectStyle"\n              data-intent-data="{&quot;layer&quot;:&quot;{{ layerID }}&quot;,&quot;style&quot;:&quot;{{ style.id }}&quot;}"\n              data-intent-ctrl="geodash-map-legend"\n              role="tab"\n              data-toggle="tab"\n              style="padding-left:8px; padding-right: 8px;"\n              ng-bind-html="style.title | default:\'Default\' | tabLabel"></a>\n          </li>\n        </ul>\n        <!-- Tab panes -->\n        <div class="tab-content">\n          <div\n            ng-class="$first ? \'tab-pane fade in active\' : \'tab-pane fade\'"\n            ng-repeat="style in layer.cartography track by $index"\n            id="modal-layer-carto-style-{{ style.id }}"\n            role="tabpanel"\n            style="padding: 10px;">\n            <span><b>Attribute: </b><span>{{ style.attribute | default:"Not styled by attribute" }}</span></span><br>\n            <span><b>Mask: </b><span ng-bind-html="style.mask | md2html | default:\'No Mask\'"></span></span><br>\n            <span><b>Description: </b><span ng-bind-html="style.description | md2html | default:\'Not specified\'"></span></span>\n            <br>\n            <br>\n            <div\n              ng-if="style.type == \'graduated\'"\n              geodash-symbol-graduated\n              style="style"\n              container-width="{{ \'392px\' }}">\n            </div>\n            <div\n              ng-if="style.legend.symbol.type == \'circle\'"\n              geodash-symbol-circle\n              style="style">\n            </div>\n            <div\n              ng-if="style.legend.symbol.type == \'graphic\'"\n              geodash-symbol-graphic\n              style="style">\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div class="modal-footer">\n      <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>\n    </div>\n  </div>\n</div>\n',geodash.templates["geodash_modal_layer_more.tpl.html"]='<div class="modal-dialog" role="document">\n  <div class="modal-content">\n    <div class="modal-header">\n      <button geodash-btn-close></button>\n      <h4 class="modal-title" id="myModalLabel">Layer / {{ layer.title }}</h4>\n    </div>\n    <div class="modal-body">\n      <div>\n        <!-- Nav tabs -->\n        <ul class="nav nav-tabs" role="tablist">\n          <li role="presentation" class="active">\n            <a\n              href="#modal-layer-more-general"\n              aria-controls="modal-layer-more-general"\n              role="tab"\n              data-toggle="tab"\n              style="padding-left:8px; padding-right: 8px;">General</a>\n          </li>\n          <li ng-if="layer.wfs" role="presentation" class="">\n            <a\n              href="#modal-layer-more-attributes"\n              aria-controls="modal-layer-more-attributes"\n              role="tab"\n              data-toggle="tab"\n              style="padding-left:8px; padding-right: 8px;">Attributes</a>\n          </li>\n          <li ng-if="layer.wms" role="presentation" class="">\n            <a\n              href="#modal-layer-more-source"\n              aria-controls="modal-layer-more-source"\n              role="tab"\n              data-toggle="tab"\n              style="padding-left:8px; padding-right: 8px;">Source</a>\n          </li>\n          <li ng-if="layer.wms" role="presentation" class="">\n            <a\n              href="#modal-layer-more-wms"\n              aria-controls="modal-layer-more-wms"\n              role="tab"\n              data-toggle="tab"\n              style="padding-left:8px; padding-right: 8px;">WMS</a>\n          </li>\n          <li ng-if="layer.wfs" role="presentation" class="">\n            <a\n              href="#modal-layer-more-wfs"\n              aria-controls="modal-layer-more-wfs"\n              role="tab"\n              data-toggle="tab"\n              style="padding-left:8px; padding-right: 8px;">WFS</a>\n          </li>\n          <li ng-if="layer.wfs" role="presentation" class="">\n            <a\n              href="#modal-layer-more-download"\n              aria-controls="modal-layer-more-download"\n              role="tab"\n              data-toggle="tab"\n              style="padding-left:8px; padding-right: 8px;">Download</a>\n          </li>\n        </ul>\n        <div class="tab-content">\n          <div\n            id="modal-layer-more-general"\n            class="tab-pane fade in active"\n            role="tabpanel"\n            style="padding: 10px;">\n            <span ng-bind-html="layer.description | md2html | default:\'No description given.\'"></span>\n            <br><br><b>Type:</b> {{ layer.type }}\n            <br><br><b>Source:</b> {{ layer.source.name | default:"Not specified" }}\n          </div>\n          <div\n            ng-if="layer.wfs"\n            id="modal-layer-more-attributes"\n            class="tab-pane fade"\n            role="tabpanel"\n            style="padding: 10px;">\n            <div>\n              Placeholder\n            </div>\n          </div>\n          <div\n            ng-if="layer.source"\n            id="modal-layer-more-source"\n            class="tab-pane fade"\n            role="tabpanel"\n            style="padding: 10px;">\n            <span><b>Name:</b> {{ layer.source.name | default:"Not specified" }}</span><br>\n            <span><b>Attribution:</b> {{ layer.source.attribution | default:"Not specified" }}</span><br>\n            <span><b>URL:</b> {{ layer.source.url | default:"Not specified" }}</span><br>\n          </div>\n          <div\n            ng-if="layer.wms"\n            id="modal-layer-more-wms"\n            class="tab-pane fade"\n            role="tabpanel"\n            style="padding: 10px;">\n            <span><b>URL:</b> {{ layer.wms.url | default:"Not specified" }}</span><br>\n            <span><b>Layers:</b> {{ layer.wms.layers|join:\', \'|default:"Not specified" }}</span><br>\n            <span><b>Styles:</b> {{ layer.wms.styles|join:\', \'|default:"Not specified" }}</span><br>\n            <span><b>Format:</b> {{ layer.wms.format | default:"Not specified" }}</span><br>\n            <span><b>Version:</b> {{ layer.wms.version | default:"Not specified" }}</span><br>\n            <span><b>Transparent:</b> {{ layer.wms.transparent | default:"No" }}</span><br>\n            <hr>\n            <span><a target="_blank" href="{{ layer.wms.url }}?SERVICE=WMS&Request=GetCapabilities">Capabilities</a><br>\n            <span><a target="_blank" href="{{ layer.wms.url }}?SERVICE=WMS&Request=GetLegendGraphic&format=image/png&layer={{ layer.wms.layers|first }}">Legend Graphic</a><br>\n          </div>\n          <div\n            ng-if="layer.wfs"\n            id="modal-layer-more-wfs"\n            class="tab-pane fade"\n            role="tabpanel"\n            style="padding: 10px;">\n            <span><b>URL:</b> {{ layer.wfs.url | default:"Not specified" }}</span><br>\n            <span><b>Version:</b> {{ layer.wfs.version | default:"Not specified" }}</span><br>\n            <hr>\n            <span><a target="_blank" href="{{ layer | url_describefeaturetype }}">Describe Feature Type</a><br>\n          </div>\n          <div\n            ng-if="layer.wfs"\n            id="modal-layer-more-download"\n            class="tab-pane fade"\n            role="tabpanel"\n            style="padding: 10px;">\n            <span><b>Download Shapefile</b>: <a target="_blank" href="{{ layer | url_shapefile }}">All</a>, <a target="_blank" href="{{ layer | url_shapefile:state }}">Current Extent</a><br>\n            <span><b>Download GeoJSON</b>: <a target="_blank" href="{{ layer | url_geojson }}">All</a>, <a target="_blank" href="{{ layer | url_geojson:state }}">Current Extent</a><br>\n            <span><b>Download Google Earth KML</b>: <a target="_blank" href="{{ layer | url_kml }}">All</a>, <a target="_blank" href="{{ layer | url_kml:state }}">Current Extent</a><br>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div class="modal-footer">\n      <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>\n    </div>\n  </div>\n</div>\n',geodash.templates["geodash_modal_layer_config.tpl.html"]='<div class="modal-dialog" role="document">\n  <div class="modal-content">\n    <div class="modal-header">\n      <button geodash-btn-close></button>\n      <h4 class="modal-title" id="myModalLabel">Layer / {{ layer.title }}</h4>\n    </div>\n    <div class="modal-body">\n      <div>\n        <!-- Nav tabs -->\n        <ul class="nav nav-tabs" role="tablist">\n          <li class="active" role="presentation">\n            <a href="#modal-layer-config-input"\n              aria-controls="modal-layer-config-input"\n              role="tab"\n              data-toggle="tab"\n              style="padding-left:8px; padding-right: 8px;">Configure</a>\n          </li>\n          <li class="" role="presentation">\n            <a href="#modal-layer-config-output"\n              aria-controls="modal-layer-config-output"\n              role="tab"\n              data-toggle="tab"\n              style="padding-left:8px; padding-right: 8px;">Output</a>\n          </li>\n        </ul>\n        <!-- Tab panes -->\n        <div class="tab-content">\n          <div\n            id="modal-layer-config-input"\n            class="tab-pane fade in active"\n            role="tabpanel"\n            style="padding: 10px;">\n            <div class="form-group row" style="margin:0; padding-top: 10px; padding-bottom: 10px;">\n              <div class="col-md-3"><h5>Title</h5></div>\n              <div class="col-md-9">\n                <label for="layer-config-title" class="sr-only control-label">Title</label>\n                <input\n                  id="layer-config-title"\n                  type="text"\n                  class="form-control"\n                  placeholder="Title ..."\n                  data-geodash-field-type="text"\n                  ng-model="layer.title"\n                  ng-change="validateField()"\n                  required\n                  value="{{ layer.title }}">\n              </div>\n            </div>\n            <div class="form-group row" style="margin:0; padding-top: 10px; padding-bottom: 10px;">\n              <div class="col-md-3"><h5>Description</h5></div>\n              <div class="col-md-9">\n                <label for="layer-config-title" class="sr-only control-label">Description</label>\n                <input\n                  id="layer-config-description"\n                  type="text"\n                  class="form-control"\n                  placeholder="Title ..."\n                  data-geodash-field-type="text"\n                  ng-model="layer.description"\n                  ng-change="validateField()"\n                  required\n                  value="{{ layer.Description }}">\n              </div>\n            </div>\n          </div>\n          <div\n            id="modal-layer-config-output"\n            class="tab-pane fade"\n            role="tabpanel"\n            style="padding: 10px;">\n            {{ layer | json }}\n          </div>\n        </div>\n      </div>\n    </div>\n    <div class="modal-footer">\n      <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>\n    </div>\n  </div>\n</div>\n',geodash.templates["symbol_circle.tpl.html"]='<div>\n  <svg width="100%" height="100%" version="1.0" xmlns="http://www.w3.org/2000/svg">\n    <circle\n      cx="50%"\n      cy="50%"\n      ng-r="{{ style.legend.symbol.radius }}"\n      ng-fill="{{ style.styles.default.static.color }}"\n      stroke-width="1"\n      stroke="#000000"></circle>\n  </svg>\n</div>\n',geodash.templates["symbol_ellipse.tpl.html"]='<div>\n  <svg width="100%" height="100%" version="1.0" xmlns="http://www.w3.org/2000/svg">\n    <ellipse\n      cx="50%"\n      cy="50%"\n      ng-rx="{{ style.legend.symbol.width }}"\n      ng-ry="{{ style.legend.symbol.height }}"\n      ng-fill="{{ style.styles.default.static.color }}"\n      stroke-width="1"\n      stroke="#000000"></circle>\n  </svg>\n</div>\n',geodash.templates["symbol_graduated.tpl.html"]='<div>\n  <div\n    style="display: inline-block; vertical-align:top;"\n    ng-bind-html="style.ramp.label.left | md2html"></div>\n  <svg\n    ng-attr-width="{{ containerWidth }}"\n    height="90px"\n    version="1.0"\n    xmlns="http://www.w3.org/2000/svg">\n    <g>\n      <rect\n        ng-repeat="color in style.colors.ramp track by $index"\n        ng-attr-x="{{ style.colors.ramp | length | position_x : $index : containerWidth : 26 }}px"\n        ng-attr-y="{{ \'0\' }}"\n        ng-attr-width="{{ style.colors.ramp | length | width_x : containerWidth : 26 }}px"\n        height="50px"\n        ng-attr-fill="{{ color }}"\n        stroke-width="1"\n        stroke="#000000"/>\n    </g>\n    <g>\n      <text\n        ng-repeat="breakpoint in style | breakpoints track by $index"\n        ng-attr-x="{{ style | breakpoints | length | add: -1 | position_x : $index : containerWidth : 26 }}px"\n        ng-attr-y="{{ $index | choose : 68 : 82 }}px"\n        text-anchor="middle"\n        ng-attr-fill="{{ \'black\' }}"\n        font-size="14px"\n        text-decoration="underline"\n        font-family="\'Open Sans\', sans-serif">{{ style | breakpoint: $index | formatBreakpoint }}</text>\n    </g>\n  </svg>\n  <div\n    style="display: inline-block; vertical-align:top;"\n    ng-bind-html="style.ramp.label.right | md2html"></div>\n</div>\n',geodash.templates["symbol_graphic.tpl.html"]='<i class="fa fa-image" style="color:black; font-size: 20px;"></i>\n',geodash.templates["legend_baselayers.tpl.html"]='<div class="geodash-map-legend-baselayers geodash-radio-group">\n  <div\n    ng-repeat="layer in baselayers track by $index"\n    ng-init="layerIndex = $index"\n    ng-if="layer.legend!==undefined"\n    class="geodash-map-legend-item noselect"\n    data-layer="{{ layer.id }}">\n    <div class="geodash-map-legend-item-left">\n      <div class="geodash-map-legend-item-icon geodash-map-legend-item-more">\n        <a\n          class="geodash-intent"\n          data-intent-ctrl="geodash-map-legend"\n          data-intent-name="toggleModal"\n          data-intent-data="{{ html5data(\'toggleModal\', \'geodash-modal-layer-more\', \'baselayer\', layer) }}">\n          <i class="fa fa-info-circle"></i>\n        </a>\n      </div><!--\n      --><div class="geodash-map-legend-item-icon geodash-map-legend-item-visibility">\n           <a\n             ng-class=" layer.id == state.view.baselayer ? \'geodash-map-legend-item-visibility-button geodash-intent geodash-radio geodash-on\' : \'geodash-map-legend-item-visibility-button geodash-intent geodash-radio\'"\n             data-intent-name="switchBaseLayer"\n             data-intent-data="{&quot;layer&quot;:&quot;{{ layer.id }}&quot;}"\n             data-intent-class-on="geodash-on"\n             data-intent-class-off=""\n             data-intent-ctrl="geodash-map-legend">\n             <i class="fa fa-eye geodash-on"></i><i class="fa fa-eye-slash geodash-off"></i>\n           </a>\n         </div><!--\n      --><div class="geodash-map-legend-item-symbol" style="width: 10px;"></div>\n    </div><!--\n    --><div class="geodash-map-legend-item-right">\n      <div\n        class="geodash-map-legend-item-label"\n        style="{{ layer.id == state.view.baselayer ? \'width: 100%;\' : \'width: 100%;opacity: 0.4;\' }}">\n        <span ng-bind-html="layer.legend.label | default_if_undefined_or_blank : layer.title | md2html"></span>\n      </div>\n    </div>\n  </div>\n</div>\n',geodash.templates["legend_featurelayers.tpl.html"]='<div class="geodash-map-legend-featurelayers">\n  <div\n    ng-repeat="layer in featurelayers track by $index"\n    ng-init="layerIndex = $index"\n    ng-if="layer.legend!==undefined"\n    class="geodash-map-legend-item noselect"\n    data-layer="{{ layer.id }}">\n    <div class="geodash-map-legend-item-left">\n      <div class="geodash-map-legend-item-icon geodash-map-legend-item-config" style="display:none;">\n        <a\n          class="geodash-intent"\n          data-intent-name="toggleModal"\n          data-intent-data="{{ html5data(\'toggleModal\', \'geodash-modal-layer-config\', \'featurelayer\', layer) }}"\n          data-intent-ctrl="geodash-map-legend">\n          <i class="fa fa-cog"></i>\n        </a>\n      </div><!--\n      --><div class="geodash-map-legend-item-icon geodash-map-legend-item-more">\n        <a\n          class="geodash-intent"\n          data-intent-name="toggleModal"\n          data-intent-data="{{ html5data(\'toggleModal\', \'geodash-modal-layer-more\', \'featurelayer\', layer) }}"\n          data-intent-ctrl="geodash-map-legend">\n          <i class="fa fa-info-circle"></i>\n        </a>\n      </div><!--\n      --><div class="geodash-map-legend-item-icon geodash-map-legend-item-visibility">\n         <a\n           ng-class="layer.id | inArray : state.view.featurelayers | ternary : \'geodash-map-legend-item-visibility-button geodash-intent geodash-toggle\' : \'geodash-map-legend-item-visibility-button geodash-intent geodash-toggle geodash-off\'"\n           data-intent-names="[&quot;showLayer&quot;,&quot;hideLayer&quot;]"\n           data-intent-data="{&quot;layer&quot;:&quot;{{ layer.id }}&quot;}"\n           data-intent-ctrl="geodash-map-legend">\n           <i class="fa fa-eye geodash-on"></i><i class="fa fa-eye-slash geodash-off"></i>\n         </a>\n     </div><!--\n     --><div\n          ng-class="layer.type == \'geojson\' ? \'geodash-map-legend-item-icon geodash-map-legend-item-zoomto\': \'geodash-map-legend-item-icon geodash-map-legend-item-zoomto fade disabled\'">\n        <a\n          class="geodash-map-legend-item-zoomto-button geodash-intent"\n          data-intent-name="zoomToLayer"\n          data-intent-data="{&quot;layer&quot;:&quot;{{ layer.id }}&quot;}"\n          data-intent-ctrl="geodash-map-legend">\n          <i class="fa fa-compress"></i>\n        </a>\n      </div>\n    </div><!--\n    --><div class="geodash-map-legend-item-right">\n      <div\n        ng-if="layer.cartography[0].legend.symbol"\n        class="geodash-map-legend-item-symbol">\n        <a\n          class="geodash-intent"\n          data-intent-name="toggleModal"\n          data-intent-data="{{ html5data(\'toggleModal\', \'geodash-modal-layer-carto\', \'featurelayer\', layer) }}"\n          data-intent-ctrl="geodash-map-legend">\n          <div ng-if="layer.cartography[0].legend.symbol.type == \'circle\'">\n            <svg width="100%" height="100%" version="1.0" xmlns="http://www.w3.org/2000/svg">\n              <circle\n                cx="50%"\n                cy="50%"\n                ng-r="{{ layer.cartography[0].legend.symbol.radius }}"\n                ng-fill="{{ layer.cartography[0].styles.default.static.color }}"\n                stroke-width="1"\n                stroke="#000000"></circle>\n            </svg>\n          </div>\n          <div ng-if="layer.cartography[0].legend.symbol.type == \'ellipse\'">\n            <svg width="100%" height="100%" version="1.0" xmlns="http://www.w3.org/2000/svg">\n              <ellipse\n                cx="50%"\n                cy="50%"\n                ng-rx="{{ layer.cartography[0].legend.symbol.width }}"\n                ng-ry="{{ layer.cartography[0].legend.symbol.height }}"\n                ng-fill="{{ layer.cartography[0].styles.default.static.color }}"\n                stroke-width="1"\n                stroke="#000000"></circle>\n            </svg>\n          </div>\n          <div\n            ng-if="layer.cartography[0].legend.symbol.type == \'graduated\'">\n            <svg\n              ng-attr-width="{{ layer.cartography[0].legend.symbol.width }}"\n              height="100%"\n              version="1.0"\n              xmlns="http://www.w3.org/2000/svg">\n              <rect\n                ng-repeat="color in layer.cartography[0].colors.ramp track by $index"\n                ng-attr-x="{{ $index|percent:layer.cartography[0].colors.ramp.length }}%"\n                y="0"\n                ng-attr-width="{{ 1|percent:layer.cartography[0].colors.ramp.length }}%"\n                ng-attr-height="{{ layer.cartography[0].legend.symbol.height }}"\n                ng-attr-fill="{{ color }}"\n                stroke-width="1"\n                stroke="#000000"/>\n            </svg>\n          </div>\n          <div\n            ng-if="layer.cartography[0].legend.symbol.type == \'graphic\'">\n            <i class="fa fa-image" style="color:black; font-size: 20px;"></i>\n          </div>\n        </a>\n      </div><!--\n      --><div\n           class="geodash-map-legend-item-label"\n           style="{{ layer.id | inArray : state.view.featurelayers | ternary : \'\' : \'opacity: 0.4;\' }}">\n        <span ng-bind-html="layer.legend.label | default_if_undefined_or_blank : layer.title | md2html"></span>\n      </div>\n    </div>\n  </div>\n</div>\n',geodash.templates["geodash_modal_welcome.tpl.html"]='<div class="modal-dialog" role="document">\n  <div class="modal-content">\n    <div class="modal-header">\n      <button geodash-btn-close></button>\n      <h4 class="modal-title" id="myModalLabel">{{ welcome.title }}</h4>\n    </div>\n    <div class="modal-body">\n      <div>\n        <!-- Nav tabs -->\n        <ul class="nav nav-tabs" role="tablist">\n          <li role="presentation" class="active">\n            <a\n              href="#modal-welcome-general"\n              aria-controls="modal-welcome-general"\n              role="tab"\n              data-toggle="tab"\n              style="padding-left:8px; padding-right: 8px;">General</a>\n          </li>\n          <li role="presentation" class="">\n            <a\n              href="#modal-welcome-about"\n              aria-controls="modal-welcome-about"\n              role="tab"\n              data-toggle="tab"\n              style="padding-left:8px; padding-right: 8px;">About</a>\n          </li>\n        </ul>\n        <div class="tab-content">\n          <div\n            id="modal-welcome-general"\n            class="tab-pane fade in active"\n            role="tabpanel"\n            style="padding: 10px;">\n            <span ng-bind-html="welcome.general | md2html | default:\'No body given.\'"></span>\n          </div>\n          <div\n            id="modal-welcome-about"\n            class="tab-pane fade"\n            role="tabpanel"\n            style="padding: 10px;">\n            <span ng-bind-html="welcome.about | md2html | default:\'No body given.\'"></span>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div class="modal-footer">\n      <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>\n    </div>\n  </div>\n</div>\n',geodash.templates["geodash_modal_about.tpl.html"]='<div class="modal-dialog" role="document">\n  <div class="modal-content">\n    <div class="modal-header">\n      <button geodash-btn-close></button>\n      <h4 class="modal-title" id="myModalLabel">{{ about.title }}</h4>\n    </div>\n    <div class="modal-body">\n      <div>\n        <!-- Nav tabs -->\n        <ul class="nav nav-tabs" role="tablist">\n          <li\n            role="presentation"\n            ng-class="$first ? \'active\' : \'\'"\n            ng-repeat="pane in about.panes track by $index">\n            <a\n              href="#{{ pane.id }}"\n              aria-controls="{{ pane.id }}"\n              role="tab"\n              data-toggle="tab"\n              style="padding-left:8px; padding-right: 8px;"\n              ng-bind-html="pane.tab.label | default:\'Default\' | tabLabel"></a>\n          </li>\n        </ul>\n        <!-- Tab panes -->\n        <div class="tab-content">\n          <div\n            ng-class="$first ? \'tab-pane fade in active\' : \'tab-pane fade\'"\n            ng-repeat="pane in about.panes track by $index"\n            id="{{ pane.id }}"\n            role="tabpanel"\n            style="padding: 10px;">\n            <span ng-bind-html="pane.content | md2html | default:\'No content given.\'"></span>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div class="modal-footer">\n      <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>\n    </div>\n  </div>\n</div>\n',geodash.templates["geodash_modal_download.tpl.html"]='<div class="modal-dialog" role="document">\n  <div class="modal-content">\n    <div class="modal-header">\n      <button geodash-btn-close></button>\n      <h4 class="modal-title" id="myModalLabel">{{ download.title }}</h4>\n    </div>\n    <div class="modal-body">\n      <div>\n        <!-- Nav tabs -->\n        <ul class="nav nav-tabs" role="tablist">\n          <li\n            role="presentation"\n            ng-class="$first ? \'active\' : \'\'"\n            ng-repeat="pane in download.panes track by $index">\n            <a\n              href="#{{ pane.id }}"\n              aria-controls="{{ pane.id }}"\n              role="tab"\n              data-toggle="tab"\n              style="padding-left:8px; padding-right: 8px;"\n              ng-bind-html="pane.tab.label | default:\'Default\' | tabLabel"></a>\n          </li>\n        </ul>\n        <!-- Tab panes -->\n        <div class="tab-content">\n          <div\n            ng-class="$first ? \'tab-pane fade in active\' : \'tab-pane fade\'"\n            ng-repeat="pane in download.panes track by $index"\n            id="{{ pane.id }}"\n            role="tabpanel"\n            style="padding: 10px;">\n            <span ng-bind-html="pane.content | md2html | default:\'No content given.\'"></span>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div class="modal-footer">\n      <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>\n    </div>\n  </div>\n</div>\n',geodash.templates["map_overlays.tpl.html"]='<div ng-class="[\'geodash-map-overlays\', ((editable | parseTrue) ? \'editable\': \'\')]">\n  <div ng-repeat="overlay in map_config.overlays track by $index">\n    <div\n      ng-if="overlay.type == \'text\'"\n      data-overlay-index="{{ $index }}"\n      data-overlay-type="text"\n      class="geodash-map-overlay"\n      height="{{ overlay.height | default_if_undefined : initial }}"\n      width="{{ overlay.width | default_if_undefined : initial }}"\n      style="{{ style(overlay.type, overlay) }}"\n      ng-bind-html="overlay.text.content | md2html"\n      on-link-done="overlayLoaded">\n    </div>\n    <div\n      ng-if="overlay.type == \'image\'"\n      data-overlay-index="{{ $index }}"\n      data-overlay-type="image"\n      class="geodash-map-overlay"\n      style="display: inline-block; {{ style(overlay.type, overlay) }}"\n      on-link-done="overlayLoaded">\n      <img\n        ng-src="{{ overlay.image.url }}"\n        width="{{ overlay.width }}"\n        height="{{ overlay.height }}">\n    </div>\n  </div>\n</div>\n',geodash.templates["geodash_sidebar_toggle_left.tpl.html"]='<div\n  id="geodash-map-sidebar-toggle-left"\n  class="geodash-intent geodash-map-sidebar-toggle geodash-map-sidebar-toggle-left btn btn-primary sidebar-open sidebar-left-open"\n  data-toggle="tooltip"\n  data-placement="bottom"\n  title="Click to toggle sidebar."\n  data-intent-name="requestToggleComponent"\n  data-intent-data="{&quot;selector&quot;:&quot;{{ selector }}&quot;,&quot;component&quot;:&quot;sidebar&quot;,&quot;position&quot;:&quot;left&quot;}"\n  data-intent-ctrl="geodash-map-sidebar-toggle-left">\n  <div\n    style="padding: 4px;">\n    <span class="icon-arrow-gt">&gt;&gt;</span>\n    <span class="icon-arrow-lt">&lt;&lt;</span>\n  </div>\n</div>\n',
geodash.templates["geodash_sidebar_toggle_right.tpl.html"]='<div\n  id="geodash-map-sidebar-toggle-right"\n  class="geodash-intent geodash-map-sidebar-toggle geodash-map-sidebar-toggle-right btn btn-primary sidebar-open sidebar-right-open"\n  data-toggle="tooltip"\n  data-placement="bottom"\n  title="Click to toggle sidebar."\n  data-intent-name="requestToggleComponent"\n  data-intent-data="{&quot;selector&quot;:&quot;{{ selector }}&quot;,&quot;component&quot;:&quot;sidebar&quot;,&quot;position&quot;:&quot;right&quot;}"\n  data-intent-ctrl="geodash-map-sidebar-toggle-right">\n  <div\n    style="padding: 4px;">\n    <span class="icon-arrow-gt">&gt;&gt;</span>\n    <span class="icon-arrow-lt">&lt;&lt;</span>\n  </div>\n</div>\n',geodash.templates["breadcrumbs.tpl.html"]='<div>\n  <div>\n    <a class="btn btn-primary btn-large" title="Explore" href="/explore">Explore &gt;&gt;</a>\n  </div>\n  <div\n    ng-repeat="bc in breadcrumbs track by $index">\n    <select\n      id="{{ bc.id }}"\n      data-output="{{ bc.output }}"\n      data-width="{{ bc.width }}"\n      data-height="{{ bc.height }}"\n      data-initial-data="{{ bc.data }}"\n      data-breadcrumbs="{{ bc.breadcrumbs }}">\n      <option\n        ng-if="bc.type == \'country\'"\n        value="{{ state.iso3 }}"\n        selected="selected">{{ state.country_title }}</option>\n      <option\n        ng-if="bc.type == \'hazard\'"\n        value="{{ state.hazard }}"\n        selected="selected">{{ state.hazard_title }}</option>\n      <option\n        ng-if="bc.type != \'country\' && bc.type != \'hazard\'"\n        value="placeholder"\n        selected="selected">{{ bc.placeholder }}</option>\n    </select>\n  </div>\n</div>\n',geodash.templates["calendar.tpl.html"]='<ul class="nav nav-justified geodash-radio-group">\n  <li\n    ng-repeat="month in months track by $index">\n    <a\n      ng-class="state.month == month.num ? \'btn btn-primary selected geodash-intent geodash-radio geodash-on\' : \'btn btn-default geodash-intent geodash-radio\'"\n      title="{{ month.long }}"\n      href="/country/{{ state.iso3 }}/hazard/{{ state.hazard }}/month/{{ month.num }}"\n      data-intent-name="stateChanged"\n      data-intent-data="{&quot;month&quot;: {{ month.num }} }"\n      data-intent-ctrl="sparc-map-calendar"\n      data-intent-class-on="btn-primary selected"\n      data-intent-class-off="btn-default" ng-bind-html="month.short3 | title"></a>\n  </li>\n</ul>\n',geodash.templates["modal_filter_more.tpl.html"]='<div class="modal-dialog" role="document">\n  <div class="modal-content">\n    <div class="modal-header">\n      <button type="button" class="close" data-dismiss="modal" aria-hidden="true"><i class="fa fa-times"></i></button>\n      <h4 class="modal-title" id="myModalLabel">Filter / {{ filter.label }}</h4>\n    </div>\n    <div class="modal-body">\n      <div>\n        <!-- Nav tabs -->\n        <ul class="nav nav-tabs" role="tablist">\n          <li\n            role="presentation"\n            class="active">\n            <a\n              href="#modal-filter-more-general"\n              aria-controls="modal-filter-more-general"\n              role="tab"\n              data-toggle="tab"\n              style="padding-left:8px; padding-right: 8px;">General</a>\n          </li>\n          <li\n            ng-if="filter.type == \'checkbox\' && filter.checkbox.options"\n            role="presentation"\n            class="">\n            <a\n              href="#modal-filter-more-options"\n              aria-controls="modal-filter-more-options"\n              role="tab"\n              data-toggle="tab"\n              style="padding-left:8px; padding-right: 8px;">Options</a>\n          </li>\n          <li\n            ng-if="filter.type == \'slider\' && filter.slider.options"\n            role="presentation"\n            class="">\n            <a\n              href="#modal-filter-more-options"\n              aria-controls="modal-filter-more-options"\n              role="tab"\n              data-toggle="tab"\n              style="padding-left:8px; padding-right: 8px;">Options</a>\n          </li>\n        </ul>\n        <div class="tab-content">\n          <div\n            id="modal-filter-more-general"\n            class="tab-pane fade in active"\n            role="tabpanel"\n            style="padding: 10px;">\n            <span ng-bind-html="filter.description | md2html | default:\'No description given.\'"></span>\n            <br><br><b>Type:</b> {{ filter.type }}\n            <div\n              ng-if="filter.type ==\'slider\' && filter.slider.type == \'continuous\'">\n              <b>Minimum Value:</b> <span ng-bind-html="filter.slider.min | formatInteger:\'delimited\':\' \'"></span>\n            </div>\n            <div\n              ng-if="filter.type ==\'slider\' && filter.slider.type == \'continuous\'">\n              <b>Maximum Value:</b> <span ng-bind-html="filter.slider.max | formatInteger:\'delimited\':\' \'"></span>\n            </div>\n            <div\n              ng-if="filter.type ==\'slider\' && filter.slider.type == \'ordinal\'">\n              <b>Minimum Value:</b> <span ng-bind-html="filter.slider.options | first"></span>\n            </div>\n            <div\n              ng-if="filter.type ==\'slider\' && filter.slider.type == \'ordinal\'">\n              <b>Maximum Value:</b> <span ng-bind-html="filter.slider.options | last"></span>\n            </div>\n            <hr>\n            <div\n              ng-if="filter.type ==\'slider\' && filter.slider.type == \'ordinal\'">\n              <b>Current Value:</b> <span ng-bind-html="value"></span>\n            </div>\n            <div\n              ng-if="filter.type ==\'slider\' && filter.slider.type == \'continuous\'">\n              <b>Current Value:</b> <span ng-bind-html="value | join:\' - \'"></span>\n            </div>\n            <div\n              ng-if="filter.type ==\'checkbox\'">\n              <b>Current Value:</b> <span ng-bind-html="value | formatArray"></span>\n            </div>\n          </div>\n          <div\n            ng-if="filter.type == \'checkbox\' && filter.checkbox.options"\n            id="modal-filter-more-options"\n            class="tab-pane fade"\n            role="tabpanel"\n            style="padding: 10px;">\n            <span\n              ng-repeat-start="option in filter.checkbox.options track by $index">\n              <i ng-class="option.checked ? \'fa fa-check-square-o\' : \'fa fa-square-o\'"></i>\n              <b ng-bind-html="option.label"></b>:\n              <span ng-bind-html="option.description | default_if_undefined:\'No description given\'"></span>\n            </span>\n            <br>\n            <br ng-repeat-end>\n          </div>\n          <div\n            ng-if="filter.type == \'slider\' && filter.slider.options"\n            id="modal-filter-more-options"\n            class="tab-pane fade"\n            role="tabpanel"\n            style="padding: 10px;">\n            <span\n              ng-repeat-start="option in filter.slider.options track by $index">\n              <i ng-class="option.checked ? \'fa fa-check-square-o\' : \'fa fa-square-o\'"></i>\n              <b ng-bind-html="option"></b>\n            </span>\n            <br ng-repeat-end>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div class="modal-footer">\n      <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>\n    </div>\n  </div>\n</div>\n',geodash.templates["filter_checkbox.tpl.html"]='<div class="geodash-filter geodash-filter-checkbox" style="height: {{ filter.height }};">\n  <div class="geodash-filter-label">\n    <a\n      class="geodash-intent"\n      data-intent-name="toggleModal"\n      data-intent-data="{&quot;id&quot;:&quot;geodash-modal-filter-more&quot;,&quot;static&quot;:{&quot;tab&quot;:&quot;modal-filter-more-general&quot;},&quot;dynamic&quot;:{&quot;value&quot;:[&quot;state&quot;,&quot;filters&quot;,&quot;popatrisk&quot;,&quot;{{ filter.checkbox.output }}&quot;],&quot;filter&quot;:[&quot;map_config&quot;,&quot;featurelayers&quot;,&quot;popatrisk&quot;,&quot;filters&quot;,&quot;{{ $index }}&quot;]}}"\n      data-intent-ctrl="geodash-map-filter">\n      <i class="fa fa-info-circle"></i>\n    </a>\n    <span ng-bind-html="filter.label | md2html"></span> :\n  </div>\n  <div\n    class="btn-group"\n    style="float:left;"\n    data-toggle="buttons"\n    data-output="{{ filter.checkbox.output }}">\n    <label\n      ng-repeat="opt in filter.checkbox.options track by $index"\n      ng-class="opt.checked ? \'btn btn-sm btn-warning active\' : \'btn btn-sm btn-default\'">\n      <input\n        type="checkbox"\n        id="{{ opt.id }}"\n        data-value="{{ opt.value }}"\n        autocomplete="off"\n        ng-checked="opt.checked || opt.selected"/>\n      {{ opt.label }}\n    </label>\n  </div>\n</div>\n',geodash.templates["filter_radio.tpl.html"]='<div class="geodash-filter geodash-filter-radio" style="height: {{ filter.height }};">\n  <div class="geodash-filter-label">\n    <a\n      class="geodash-intent"\n      data-intent-name="toggleModal"\n      data-intent-data="{&quot;id&quot;:&quot;geodash-modal-filter-more&quot;,&quot;static&quot;:{&quot;tab&quot;:&quot;modal-filter-more-general&quot;},&quot;dynamic&quot;:{&quot;value&quot;:[&quot;state&quot;,&quot;filters&quot;,&quot;popatrisk&quot;,&quot;{{ filter.radio.output }}&quot;],&quot;filter&quot;:[&quot;map_config&quot;,&quot;featurelayers&quot;,&quot;popatrisk&quot;,&quot;filters&quot;,&quot;{{ $index }}&quot;]}}"\n      data-intent-ctrl="geodash-map-filter">\n      <i class="fa fa-info-circle"></i>\n    </a>\n    <span ng-bind-html="filter.label | md2html"></span> :\n  </div>\n  <div\n    class="btn-group"\n    style="float:left;"\n    data-toggle="buttons"\n    data-output="{{ filter.radio.output }}">\n    <label\n      ng-repeat="opt in filter.radio.options track by $index"\n      ng-class="opt.checked ? \'btn btn-default active\' : \'btn btn-default\'">\n      <input\n        type="radio"\n        id="{{ opt.id }}"\n        name="{{ opt.name }}"\n        value="{{ opt.value }}"\n        data-output="{{ filter.radio.output }}"\n        ng-checked="opt.checked || opt.selected"/>\n      {{ opt.label }}\n    </label>\n  </div>\n</div>\n',geodash.templates["filter_slider.tpl.html"]='<div class="geodash-filter geodash-filter-slider" style="height: {{ filter.height }};">\n  <div class="geodash-filter-label">\n    <a\n      class="geodash-intent"\n      data-intent-name="toggleModal"\n      data-intent-data="{&quot;id&quot;:&quot;geodash-modal-filter-more&quot;,&quot;static&quot;:{&quot;tab&quot;:&quot;modal-filter-more-general&quot;},&quot;dynamic&quot;:{&quot;value&quot;:[&quot;state&quot;,&quot;filters&quot;,&quot;popatrisk&quot;,&quot;{{ filter.slider.output }}&quot;],&quot;filter&quot;:[&quot;map_config&quot;,&quot;featurelayers&quot;,&quot;popatrisk&quot;,&quot;filters&quot;,&quot;{{ $index }}&quot;]}}"\n      data-intent-ctrl="geodash-map-filter">\n      <i class="fa fa-info-circle"></i>\n    </a>\n    <span ng-bind-html="filter.label | md2html"></span> :\n  </div>\n  <div style="display:table; height:{{ filter.height }};padding-left:10px;padding-right:10px;">\n    <div style="display:table-cell;vertical-align:middle;">\n      <div class="geodash-filter-slider-label">Placeholder</div>\n      <div\n        class="geodash-filter-slider-slider"\n        style="width:{{ filter.slider.width }};"\n        data-type="{{ filter.slider.type }}"\n        data-value="{{ filter.slider.value ? filter.slider.value : \'\' }}"\n        data-values="{{ filter.slider.values ? filter.slider.values : \'\' }}"\n        data-range="{{ filter.slider.range == \'true\' ? \'true\': filter.slider.range }}"\n        data-output="{{ filter.slider.output }}"\n        data-min-value="{{ filter.slider.min|default_if_undefined:\'\' }}"\n        data-max-value="{{ filter.slider.max|default_if_undefined:\'\' }}"\n        data-step="{{ filter.slider.step ? filter.slider.step : \'\' }}"\n        data-options="{{ filter.slider.options ? filter.slider.options : \'\' }}"\n        data-label-template="{{ filter.slider.label }}"\n        ></div>\n    </div>\n  </div>\n</div>\n',geodash.templates["filter_container.tpl.html"]='<div id="geodash-map-filter-container" class="collapse" style="">\n  <div\n    ng-repeat="filter in filters track by $index">\n    <div geodash-filter-radio ng-if="filter.type == \'radio\'"></div>\n    <div geodash-filter-checkbox ng-if="filter.type == \'checkbox\'"></div>\n    <div geodash-filter-slider ng-if="filter.type == \'slider\'"></div>\n  </div>\n</div>\n',geodash.templates["sparc_sidebar.tpl.html"]='<div\n  id="sparc-sidebar-left"\n  class="geodash-sidebar geodash-sidebar-left geodash-controller sidebar-open sidebar-left-open">\n  <div class="geodash-sidebar-charts" style="width:100%;">\n    <div geodash-tabs></div>\n    <div class="tab-content">\n      <div\n        id="sparc-sidebar-left-welcome"\n        role="tabpanel"\n        class="tab-pane fade in active"\n        style="padding: 10px;">\n        <div\n          ng-bind-html="map_config.welcome.intro | md2html">\n        </div>\n      </div>\n      <div\n        id="sparc-sidebar-left-charts"\n        role="tabpanel"\n        class="tab-pane fade"\n        style="padding: 10px;">\n        <div\n          ng-repeat="chart in charts track by $index"\n          on-repeat-done="chart_done"\n          data-repeat-index="{{ $index }}"\n          id="sparc-sidebar-left-charts-chart-{{ chart.id }}">\n          <div>\n            <h4\n              style="text-align:center;"\n              ng-bind-html="chart.title | md2html"></h4>\n          </div>\n          <div\n            id="{{ chart.element }}"\n            class="geodash-sidebar-chart"\n            style="width:360px;margin:0 auto;"\n          ></div>\n        </div>\n      </div>\n      <div\n        id="sparc-sidebar-left-layers"\n        role="tabpanel"\n        class="tab-pane fade"\n        style="padding: 10px;">\n        <div>\n          <div class="input-group select2-bootstrap-prepend select2-bootstrap-append">\n            <input\n              id="country-input-backend"\n              name="country-input-backend"\n              type="text"\n              class="form-control"\n              style="display:none;"\n              ng-model="country">\n            <span class="input-group-addon" id="country-addon">Country</span>\n            <input\n              id="country-input"\n              name="country-input"\n              type="text"\n              class="typeahead form-control"\n              style="height: auto;"\n              placeholder="Country (e.g., Haiti or Philippines)"\n              aria-describedby="country-addon"\n              data-placeholder="Country (e.g., Haiti, Nepal, or Philippines)"\n              data-initial-data="countries_select2"\n              data-backend="country-input-backend"\n              data-template-empty="<div class=&quot;alert alert-danger empty-message&quot;>Unable to find country</div>">\n              <div\n                class="input-group-addon btn btn-primary btn-show-options"\n                data-toggle="tooltip"\n                data-placement="bottom"\n                title="Show Options"\n                ng-click="showOptions($event, \'#country-input\')">\n                <i class="fa fa-chevron-down"></i>\n              </div>\n              <div\n                class="input-group-addon btn btn-danger btn-clear"\n                data-clear="#country-input"\n                data-toggle="tooltip"\n                data-placement="bottom"\n                title="Clear Selection">\n                <i class="fa fa-times"></i>\n              </div>\n          </div>\n          <hr>\n          <ul class="nav nav-justified welcome-go">\n            <li>\n              <a\n                ng-disabled="country == undefined || hazard == undefined || country == \'\' || hazard == \'\'"\n                ng-class="country == undefined || hazard == undefined || country == \'\' || hazard == \'\' ? \'btn btn-default\' : \'btn btn-primary\' "\n                ng-href="{{ country == undefined || hazard == undefined || country == \'\' || hazard == \'\' ? \'#\' : \'/country/\'+country+\'/hazard/\'+hazard +\'/month/1\' }}">Go!</a>\n            </li>\n          </ul>\n        </div>\n        <div>\n          <h4>Selected Layers</h4>\n          <div class="geodash-sidebar-sparclayers">\n            <div\n              ng-repeat="layer in visiblefeaturelayers track by $index"\n              ng-init="layerIndex = $index"\n              ng-if="layer.legend!==undefined"\n              class="geodash-sidebar-item noselect"\n              data-layer="{{ layer.id }}">\n              <div class="geodash-sidebar-item-left">\n                <div class="geodash-sidebar-item-icon geodash-sidebar-item-visibility">\n                   <a\n                     class="geodash-sidebar-item-visibility-button geodash-intent"\n                     data-intent-name="hideLayer"\n                     data-intent-data="{&quot;layer&quot;:&quot;{{ layer.id }}&quot;}"\n                     data-intent-ctrl="sparc-sidebar-left"\n                     data-toggle="tooltip"\n                     data-placement="bottom"\n                     title="Click to hide this layer.">\n                     <i class="fa fa-times"></i>\n                   </a>\n                </div><!--\n                --><div class="geodash-sidebar-item-icon geodash-sidebar-item-more">\n                  <a\n                    class="geodash-intent"\n                    data-intent-name="showModal"\n                    data-intent-data="{{ html5data(\'showModal\', \'geodash-modal-layer-more\', \'featurelayer\', layer) }}"\n                    data-intent-ctrl="sparc-sidebar-left"\n                    data-toggle="tooltip"\n                    data-placement="bottom"\n                    title="Click to learn more about this layer.">\n                    <i class="fa fa-info-circle"></i>\n                  </a>\n                </div><!--\n                --><div\n                     ng-class="layer.type == \'geojson\' ? \'geodash-sidebar-item-icon geodash-sidebar-item-zoomto\': \'geodash-sidebar-item-icon geodash-sidebar-item-zoomto fade disabled\'">\n                   <a\n                     class="geodash-sidebar-item-zoomto-button geodash-intent"\n                     data-intent-name="zoomToLayer"\n                     data-intent-data="{&quot;layer&quot;:&quot;{{ layer.id }}&quot;}"\n                     data-intent-ctrl="sparc-sidebar-left"\n                     data-toggle="tooltip"\n                     data-placement="bottom"\n                     title="Click to zoom to this layer.">\n                     <i class="fa fa-compress"></i>\n                   </a>\n                </div>\n              </div><!--\n              --><div class="geodash-sidebar-item-right">\n                <div\n                  class="geodash-sidebar-item-label"\n                  style="width: 100%;">\n                  <span ng-bind-html="layer.legend.label | md2html"></span>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div\n          ng-repeat="x in groups track by $index"\n          ng-init="groupIndex = $index">\n          <h4 ng-bind-html="x.label"></h4>\n          <div ng-class="x.class">\n            <div\n              ng-repeat="layer in x.layers track by $index"\n              ng-init="layerIndex = $index"\n              ng-if="layer.legend | ternary_defined : ( layer.id | inArray : state.view.featurelayers | not) : false"\n              class="geodash-sidebar-item noselect"\n              data-layer="{{ layer.id }}">\n              <div class="geodash-sidebar-item-left">\n                <div class="geodash-sidebar-item-icon geodash-sidebar-item-more">\n                  <a\n                    class="geodash-intent"\n                    data-intent-name="toggleModal"\n                    data-intent-data="{{ html5data(\'toggleModal\', \'geodash-modal-layer-more\', \'featurelayer\', layer) }}"\n                    data-intent-ctrl="sparc-sidebar-left"\n                    data-toggle="tooltip"\n                    data-placement="bottom"\n                    title="Click to learn more about this layer.">\n                    <i class="fa fa-info-circle"></i>\n                  </a>\n                </div>\n              </div><!--\n              --><div class="geodash-sidebar-item-right">\n                <div\n                  class="geodash-sidebar-item-label geodash-intent"\n                  style="width: 100%; opacity: 0.6;"\n                  data-intent-name="showLayer"\n                  data-intent-data="{&quot;layer&quot;:&quot;{{ layer.id }}&quot;}"\n                  data-intent-ctrl="sparc-sidebar-left">\n                  <span ng-bind-html="layer.legend.label | md2html"></span>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <h4>Base Layers</h4>\n        <div class="geodash-sidebar-baselayers geodash-radio-group">\n          <div\n            ng-repeat="layer in baselayers track by $index"\n            ng-init="layerIndex = $index"\n            ng-if="layer.legend!==undefined"\n            class="geodash-sidebar-item noselect"\n            data-layer="{{ layer.id }}">\n            <div class="geodash-sidebar-item-left">\n              <div class="geodash-sidebar-item-icon geodash-sidebar-item-more">\n                <a\n                  class="geodash-intent"\n                  data-intent-name="toggleModal"\n                  data-intent-data="{{ html5data(\'toggleModal\', \'geodash-modal-layer-more\', \'baselayer\', layer) }}"\n                  data-intent-ctrl="sparc-sidebar-left"\n                  data-toggle="tooltip"\n                  data-placement="bottom"\n                  title="Click to learn more about this layer.">\n                  <i class="fa fa-info-circle"></i>\n                </a>\n              </div><!--\n              --><div class="geodash-sidebar-item-icon geodash-sidebar-item-visibility">\n                   <a\n                     ng-class=" layer.id == state.view.baselayer ? \'geodash-sidebar-item-visibility-button geodash-intent geodash-radio geodash-on\' : \'geodash-sidebar-item-visibility-button geodash-intent geodash-radio\'"\n                     data-intent-name="switchBaseLayer"\n                     data-intent-data="{&quot;layer&quot;:&quot;{{ layer.id }}&quot;}"\n                     data-intent-class-on="geodash-on"\n                     data-intent-class-off=""\n                     data-intent-ctrl="sparc-sidebar-left">\n                     <i class="fa fa-eye geodash-on"></i><i class="fa fa-eye-slash geodash-off"></i>\n                   </a>\n              </div><!--\n              --><div class="geodash-sidebar-item-symbol" style="width: 10px;"></div>\n            </div><!--\n            --><div class="geodash-sidebar-item-right">\n              <div\n                class="geodash-sidebar-item-label"\n                style="{{ layer.id == state.view.baselayer ? \'width: 100%;\' : \'width: 100%;opacity: 0.4;\' }}">\n                <span ng-bind-html="layer.legend.label | md2html"></span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div\n        id="sparc-sidebar-left-filters"\n        role="tabpanel"\n        class="tab-pane fade"\n        style="padding: 10px;">\n        <div\n          ng-repeat="filter in filters track by $index">\n          <div geodash-filter-radio ng-if="filter.type == \'radio\'"></div>\n          <div geodash-filter-checkbox ng-if="filter.type == \'checkbox\'"></div>\n          <div geodash-filter-slider ng-if="filter.type == \'slider\'"></div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n',geodash.templates["sparc_modal_welcome.tpl.html"]='<div\n  id="geodash-modal-sparc-welcome"\n  class="geodash-controller geodash-controller-modal geodash-modal modal fade geodash-sparc-welcome"\n  tabindex="-1"\n  role="dialog"\n  aria-labelledby="myModalLabel">\n  <div class="modal-dialog" data-backdrop="static" role="document">\n    <div class="modal-content">\n      <div class="modal-header">\n        <h4 class="modal-title" id="myModalLabel">{{ welcome.title }}</h4>\n      </div>\n      <div class="modal-body">\n        <div>\n          <div geodash-tabs></div>\n          <div class="tab-content">\n            <div\n              id="modal-sparc-welcome-intro"\n              class="tab-pane fade in active"\n              role="tabpanel"\n              style="padding: 10px;">\n              <span\n                class="welcome-body"\n                ng-bind-html="welcome.intro | md2html | default:\'No body given.\'"></span>\n              <hr>\n              <h3 class="welcome-body">Get Started: Select a county &amp; hazard!</h3>\n              <div class="input-group select2-bootstrap-prepend select2-bootstrap-append">\n                <input\n                  id="country-input-backend"\n                  name="country-input-backend"\n                  type="text"\n                  class="form-control"\n                  style="display:none;"\n                  ng-model="country">\n                <span class="input-group-addon" id="country-addon">Country</span>\n                <input\n                  id="country-input"\n                  name="country-input"\n                  type="text"\n                  class="typeahead form-control"\n                  style="height: auto;"\n                  placeholder="Country (e.g., Haiti or Philippines)"\n                  aria-describedby="country-addon"\n                  data-placeholder="Country (e.g., Haiti, Nepal, or Philippines)"\n                  data-initial-data="countries_select2"\n                  data-backend="country-input-backend"\n                  data-template-empty="<div class=&quot;alert alert-danger empty-message&quot;>Unable to find country</div>">\n                  <div\n                    class="input-group-addon btn btn-primary btn-show-options"\n                    data-toggle="tooltip"\n                    data-placement="bottom"\n                    title="Show Options"\n                    ng-click="showOptions($event, \'#country-input\')">\n                    <i class="fa fa-chevron-down"></i>\n                  </div>\n                  <div\n                    class="input-group-addon btn btn-danger btn-clear"\n                    data-clear="#country-input"\n                    data-toggle="tooltip"\n                    data-placement="bottom"\n                    title="Clear Selection">\n                    <i class="fa fa-times"></i>\n                  </div>\n              </div>\n              <br>\n              <div class="input-group select2-bootstrap-prepend select2-bootstrap-append">\n                <input\n                  id="hazard-input-backend"\n                  name="hazard-input-backend"\n                  type="text"\n                  class="form-control"\n                  style="display:none;"\n                  ng-model="hazard">\n                <span class="input-group-addon" id="hazard-addon">Hazard</span>\n                <input\n                  id="hazard-input"\n                  name="hazard-input"\n                  type="text"\n                  class="typeahead form-control"\n                  style="height: auto;"\n                  placeholder="Hazard (e.g., Flood, Cyclone, Drought, or Landslide)"\n                  aria-describedby="hazard-addon"\n                  data-placeholder="Hazard (e.g., Flood, Cyclone, Drought, or Landslide)"\n                  data-initial-data="hazards_select2"\n                  data-backend="hazard-input-backend"\n                  data-template-empty="<div class=&quot;empty-message&quot;>Unable to find hazard</div>">\n                  <div\n                    class="input-group-addon btn btn-primary btn-show-options"\n                    data-toggle="tooltip"\n                    data-placement="bottom"\n                    title="Show Options"\n                    ng-click="showOptions($event, \'#hazard-input\')">\n                    <i class="fa fa-chevron-down"></i>\n                  </div>\n                  <div\n                    class="input-group-addon btn btn-danger btn-clear"\n                    data-clear="#hazard-input"\n                    data-toggle="tooltip"\n                    data-placement="bottom"\n                    title="Clear Selection">\n                    <i class="fa fa-times"></i>\n                  </div>\n              </div>\n              <hr>\n              <ul class="nav nav-justified welcome-go">\n                <li>\n                  <a\n                    ng-disabled="country == undefined || hazard == undefined || country == \'\' || hazard == \'\'"\n                    ng-class="country == undefined || hazard == undefined || country == \'\' || hazard == \'\' ? \'btn btn-default\' : \'btn btn-primary\' "\n                    ng-href="{{ country == undefined || hazard == undefined || country == \'\' || hazard == \'\' ? \'#\' : \'/country/\'+country+\'/hazard/\'+hazard +\'/month/1\' }}">Go!</a>\n                </li>\n              </ul>\n            </div>\n            <div\n              id="modal-sparc-welcome-about"\n              class="tab-pane fade"\n              role="tabpanel"\n              style="padding: 10px;">\n              <span ng-bind-html="welcome.about | md2html | default:\'No body given.\'"></span>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n';var MONTHS_NUM=[1,2,3,4,5,6,7,8,9,10,11,12],MONTHS_LONG=["January","February","March","April","May","June","July","August","September","October","November","December"],MONTHS_SHORT3=["jan","feb","mar","apr","may","jun","jul","aug","sep","oct","nov","dec"],MONTHS_ALL=$.map(MONTHS_NUM,function(num,i){return{num:num,short3:MONTHS_SHORT3[i],"long":MONTHS_LONG[i]}}),DAYSOFTHEWEEK=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"];SPARC_BREADCRUMBS=[{id:"sparc-select-country",placeholder:"Country...",type:"country",width:"resolve",height:"50px",output:"iso3",data:"countries_select2",breadcrumbs:[{name:"country",value:"iso3"},{name:"hazard",value:"hazard"},{name:"month",value:"month_num"}]},{id:"sparc-select-hazard",placeholder:"Hazard...",type:"hazard",width:"resolve",height:"50px",output:"hazard",data:"hazards_select2",breadcrumbs:[{name:"country",value:"iso3"},{name:"hazard",value:"hazard"},{name:"month",value:"month_num"}]}],geodash.filters["default"]=function(){return function(value,fallback){return value||fallback}},geodash.filters.md2html=function(){return function(text){if(void 0!=text){var converter=new showdown.Converter;html=converter.makeHtml(text),html=html.replace(new RegExp("(<a .*?)>(.*?)</a>","gi"),'$1 target="_blank">$2</a>'),html=html.replace(new RegExp("\n","gi"),"<br>"),html=html.replace(new RegExp("<br><br><(h\\d.*?)>","gi"),"<br><$1>"),html=html.replace(new RegExp("<br><br><p>","gi"),"<p>");var matches=html.match(new RegExp("^<p(.*?)>(.*?)</p>","gi"));return Array.isArray(matches)&&1==matches.length&&matches[0]==html&&(html=html.substring("<p>".length,html.length-"</p>".length)),html}return""}},geodash.filters.percent=function(){return function(value,denominator){return 100*value/denominator}},geodash.filters.tabLabel=function(){return function(value){return 2==value.split(" ").length?value.replace(" ","<br>"):value}},geodash.filters.as_float=function(){return function(value){return 1*value}},geodash.filters.add=function(){return function(value,arg){if(Array.isArray(arg)){var arr=arg;return value+arr[value%arr.length]}if(arguments.length>2){var arr=Array.prototype.slice.call(arguments,[1]);return value+arr[value%arr.length];
}return value+arg}},geodash.filters.title=function(){return function(value){return"string"===$.type(value)?value.toTitleCase():value}},geodash.filters.as_array=function(){return function(value){return $.isArray(value)?value:$.map(value,function(item,key){return{key:key,item:item}})}},geodash.filters.sortItemsByArray=function(){return function(value,arg){return $.isArray(value)?(value=$.grep(value,function(x,i){return $.inArray(x.key,arg)!=-1}),value.sort(function(a,b){return $.inArray(a.key,arg)-$.inArray(a.key,arg)}),value):value}},geodash.filters.breakpoint=function(){return function(style,index){var breakpoints=geodash.breakpoints[style.styles["default"].dynamic.options.breakpoints];return void 0!=breakpoints&&breakpoints.length>0?breakpoints[index]:-1}},geodash.filters.breakpoints=function(){return function(style){var breakpoints=geodash.breakpoints[style.styles["default"].dynamic.options.breakpoints];return void 0!=breakpoints&&breakpoints.length>0?breakpoints:[]}},geodash.filters.position_x=function(){return function(domain,index,containerWidth,padding){var parse_container_width=function(w){return $.isNumeric(w)?w:parseInt(w.substring(0,w.indexOf("px")),10)},actualWidth=parse_container_width(containerWidth)-2*padding;return padding+actualWidth*index/domain}},geodash.filters.width_x=function(){return function(domain,containerWidth,padding){var parse_container_width=function(w){return $.isNumeric(w)?w:parseInt(w.substring(0,w.indexOf("px")),10)},actualWidth=parse_container_width(containerWidth)-2*padding;return actualWidth/domain}},geodash.filters.len=geodash.filters.length=function(){return function(value){return Array.isArray(value)?value.length:angular.isString(value)?value.length:0}},geodash.filters.layer_is_visible=function(){return function(layerID,state){state=state||$("#geodash-main").scope().state;var visibleFeatureLayers=state.view.featurelayers;return layerID==state.view.baselayer||$.inArray(layerID,visibleFeatureLayers)!=-1}},geodash.filters.append=function(){return function(value,arg){if(Array.isArray(value))return Array.isArray(arg)?value.concat(arg):value.push(arg);if(angular.isString(value)){var arr=Array.prototype.slice.call(arguments,[1]);return value+arr.join("")}return value+arg}},geodash.filters.default_if_undefined=function(){return function(value,fallback){return void 0!=value&&null!=value?value:fallback}},geodash.filters.default_if_undefined_or_blank=function(){return function(value,fallback){return void 0!=value&&null!=value&&""!=value?value:fallback}},geodash.filters.extract=function(){return function(node){var keyChain=Array.prototype.slice.call(arguments,[1]);return keyChain.length>0?extract(expand(keyChain),node):null}},geodash.filters.extractTest=function(){return function(node){var keyChain=Array.prototype.slice.call(arguments,[1]);return keyChain.length>0?extract(expand(keyChain),node):null}},geodash.filters.inArray=function(){return function(value,arr){return!!Array.isArray(arr)&&arr.indexOf(value)!=-1}},geodash.filters.not=function(){return function(value){return!value}},geodash.filters.prepend=function(){return function(value,arg){if(Array.isArray(value))return Array.isArray(arg)?arg.concat(value):[arg].concat(value);if(angular.isString(value)){var arr=Array.prototype.slice.call(arguments,[1]);return arr.join("")+value}return arg+value}},geodash.filters.parseTrue=function(){return function(value){return["on","true","t","1",1,!0].indexOf(value)!=-1}},geodash.filters.ternary=function(){return function(value,t,f){return value?t:f}},geodash.filters.ternary_defined=function(){return function(value,t,f){return void 0!=value&&null!=value&&""!=value?t:f}},geodash.filters.yaml=function(){return function(value,depth){return void 0!=value?YAML.stringify(value,depth||4):""}},geodash.filters.join=function(){return function(array,arg){return Array.isArray(array)?array.join(arg):array}},geodash.filters.first=function(){return function(array){return Array.isArray(array)?array[0]:array}},geodash.filters.last=function(){return function(arr){if(!Array.isArray(arr))return arr;if(0!=arr.length)return arr[arr.length-1]}},geodash.filters.choose=function(){return function(value,arg){if(Array.isArray(arg)){var arr=arg;return arr[value%arr.length]}var arr=Array.prototype.slice.call(arguments,[1]);return arr[value%arr.length]}},geodash.filters.formatBreakpoint=function(){return function(value){return Number.isInteger(value)?geodash.filters.formatInteger()(value,"delimited"," "):$.isNumeric(value)?geodash.filters.formatFloat()(value,2):""+value}},geodash.filters.formatFloat=function(){return function(value,decimals){return void 0!=value&&""!==value?void 0!=decimals?value.toFixed(decimals):value.toString():""}},geodash.filters.formatInteger=function(){return function(value,type,delimiter){if(void 0!=value&&""!==value){if("delimited"==type){delimiter=delimiter||",";for(var str=Math.round(value).toString(),pattern=new RegExp("(\\d+)(\\d{3})","gi");pattern.test(str);)str=str.replace(pattern,"$1"+delimiter+"$2");return str}return Math.round(value).toString()}return""}},geodash.filters.formatArray=function(){return function(arr){return Array.isArray(arr)?0==arr.length?"":1==arr.length?arr[0]:2==arr.length?arr.join(" and "):arr.slice(0,-1).join(", ")+", and "+arr[arr.length-1]:arr}},geodash.filters.formatMonth=function(){return function(value,type){return void 0!=value&&""!==value?"long"==type?months_long[value-1]:"short3"==type||"short_3"==type?months_short_3[value-1]:"int2"==type&&value<10?"0"+value.toString():value.toString():""}},geodash.filters.eq=function(){return function(value,arg){return!(!angular.isNumber(value)||!angular.isNumber(arg))&&value==arg}},geodash.filters.lte=function(){return function(value,arg){return!(!angular.isNumber(value)||!angular.isNumber(arg))&&value<=arg}},geodash.filters.gte=function(){return function(value,arg){return!(!angular.isNumber(value)||!angular.isNumber(arg))&&value>=arg}},geodash.filters.gt=function(){return function(value,arg){return!(!angular.isNumber(value)||!angular.isNumber(arg))&&value>arg}},geodash.filters.replace=function(){return function(value,oldSubstring,newSubstring){return angular.isString(value)?angular.isString(oldSubstring)&&angular.isString(newSubstring)?"."==oldSubstring?value.replace(new RegExp("[.]","g"),newSubstring):value.replace(oldSubstring,newSubstring):value:""}},geodash.filters.split=function(){return function(value,delimiter){return angular.isString(value)?value.split(delimiter||","):value}},geodash.filters.url_shapefile=function(){return function(layer,state){var url="";if("wfs"in layer){var typename="";"layers"in layer.wms?typename=layer.wms.layers[0]:"layers"in layer.wfs&&(typename=layer.wfs.layers[0]);var params={format_options:"charset:UTF-8",typename:typename,outputFormat:"SHAPE-ZIP",version:"1.0.0",service:"WFS",request:"GetFeature"};void 0!=state&&(params.cql_filter="BBOX("+layer.wfs.geometry+", "+state.view.extent+")");var querystring=$.map(params,function(v,k){return encodeURIComponent(k)+"="+encodeURIComponent(v)}).join("&");url=layer.wfs.url+"?"+querystring}return url}},geodash.filters.url_geojson=function(){return function(layer,state){var url="";if("wfs"in layer){var typename="";"layers"in layer.wms?typename=layer.wms.layers[0]:"layers"in layer.wfs&&(typename=layer.wfs.layers[0]);var params={format_options:"charset:UTF-8",typename:typename,outputFormat:"json",version:"1.0.0",service:"WFS",request:"GetFeature"};void 0!=state&&(params.cql_filter="BBOX("+layer.wfs.geometry+", "+state.view.extent+")");var querystring=$.map(params,function(v,k){return encodeURIComponent(k)+"="+encodeURIComponent(v)}).join("&");url=layer.wfs.url+"?"+querystring}return url}},geodash.filters.url_kml=function(){return function(layer,state){var url="";if("kml"in layer){var typename="";"layers"in layer.wms?typename=layer.wms.layers[0]:"layers"in layer.wfs&&(typename=layer.wfs.layers[0]);var params={mode:"download",layers:typename};void 0!=state&&(params.cql_filter="BBOX("+layer.wfs.geometry+", "+state.view.extent+")");var querystring=$.map(params,function(v,k){return encodeURIComponent(k)+"="+encodeURIComponent(v)}).join("&");url=layer.kml.url+"?"+querystring}return url}},geodash.filters.url_describefeaturetype=function(){return function(layer){var url="";if("wfs"in layer){var version=layer.wfs.version||"1.0.0",params={service:"WFS",request:"DescribeFeatureType",version:version,outputFormat:"application/json"},typename="";"layers"in layer.wms?typename=layer.wms.layers.unique().join(","):"layers"in layer.wfs&&(typename=layer.wfs.layers.unique().join(",")),"1.1.0"==version||"1.0.0"==version?params.typeName=typename:params.typeNames=typename;var querystring=$.map(params,function(v,k){return encodeURIComponent(k)+"="+encodeURIComponent(v)}).join("&");url=layer.wfs.url+"?"+querystring}return url}},geodash.handlers.clickedOnMap=function($scope,$interpolate,$http,$q,event,args){console.log("event",event),console.log("args",args);var $scope=geodash.api.getScope("geodash-main"),z=$scope.state.view.z,visibleFeatureLayers=$scope.state.view.featurelayers;console.log("visibleFeatureLayers",visibleFeatureLayers);for(var featurelayers_by_featuretype={},fields_by_featuretype={},urls=[],i=0;i<visibleFeatureLayers.length;i++){var fl=geodash.api.getFeatureLayer(visibleFeatureLayers[i],{scope:$scope});if("wfs"in fl&&void 0!=fl.wfs){var params={service:"wfs",version:extract("wfs.version",fl,"1.0.0"),request:"GetFeature",srsName:"EPSG:4326"},targetLocation=new L.LatLng(args.lat,args.lon),bbox=geodash.tilemath.point_to_bbox(args.lon,args.lat,z,4).join(","),typeNames=extract("wfs.layers",fl,void 0)||extract("wms.layers",fl,void 0)||[];angular.isString(typeNames)&&(typeNames=typeNames.split(","));for(var j=0;j<typeNames.length;j++){typeName=typeNames[j];var url=fl.wfs.url+"?"+$.param($.extend(params,{typeNames:typeName,bbox:bbox}));urls.push(url),fields_by_featuretype[typeName.toLowerCase()]=geodash.layers.aggregate_fields(fl),featurelayers_by_featuretype[typeName.toLowerCase()]=fl,typeName.toLowerCase().startsWith("geonode:")||(featurelayers_by_featuretype["geonode:"+typeName.toLowerCase()]=fl)}}}$q.all(geodash.http.build_promises($http,urls)).then(function(responses){var features=geodash.http.build_features(responses,fields_by_featuretype);if(console.log("Features: ",features),features.length>0){var featureAndLocation=geodash.vecmath.getClosestFeatureAndLocation(features,targetLocation),fl=featurelayers_by_featuretype[featureAndLocation.feature.featuretype]||featurelayers_by_featuretype["geonode:"+featureAndLocation.feature.featuretype];$scope.$broadcast("openPopup",{featureLayer:fl,feature:featureAndLocation.feature,location:{lon:featureAndLocation.location.lng,lat:featureAndLocation.location.lat}})}})},geodash.handlers.hideLayer=function($scope,$interpolate,$http,$q,event,args){console.log("event",event),console.log("args",args);var $scope=geodash.api.getScope("geodash-main"),layer=args.layer,i=$.inArray(layer,$scope.state.view.featurelayers);i!=-1&&($scope.state.view.featurelayers.splice(i,1),$scope.refreshMap($scope.state))},geodash.handlers.hideLayers=function($scope,$interpolate,$http,$q,event,args){console.log("event",event),console.log("args",args);for(var $scope=geodash.api.getScope("geodash-main"),layers=args.layers,i=0;i<layers.length;i++){var layer=args.layers[i],j=$.inArray(layer,$scope.state.view.featurelayers);j!=-1&&($scope.state.view.featurelayers.splice(j,1),$scope.refreshMap($scope.state))}},geodash.handlers.layerLoaded=function($scope,$interpolate,$http,$q,event,args){var $scope=geodash.api.getScope("geodash-main"),type=args.type,layer=args.layer,visible=void 0==args.visible||args.visible;"featurelayer"==type?visible&&$scope.state.view.featurelayers.push(layer):"baselayer"==type&&($scope.state.view.baselayer=layer)},geodash.handlers.requestToggleComponent=function($scope,$interpolate,$http,$q,event,args){geodash.api.getScope("geodash-main").$broadcast("toggleComponent",args)},geodash.handlers.showLayer=function($scope,$interpolate,$http,$q,event,args){console.log("event",event),console.log("args",args);var $scope=geodash.api.getScope("geodash-main"),layer=args.layer;$.inArray(layer,$scope.state.view.featurelayers)==-1&&($scope.state.view.featurelayers.push(layer),$scope.refreshMap($scope.state))},geodash.handlers.showLayers=function($scope,$interpolate,$http,$q,event,args){console.log("event",event),console.log("args",args);for(var $scope=geodash.api.getScope("geodash-main"),layers=args.layers,i=0;i<layers.length;i++){var layer=layers[i];$.inArray(layer,$scope.state.view.featurelayers)==-1&&($scope.state.view.featurelayers.push(layer),$scope.refreshMap($scope.state))}},geodash.handlers.switchBaseLayer=function($scope,$interpolate,$http,$q,event,args){console.log("event",event),console.log("args",args);var $scope=geodash.api.getScope("geodash-main");$scope.state.view.baselayer=args.layer,$scope.refreshMap($scope.state)},geodash.handlers.toggleComponent=function($scope,$interpolate,$http,$q,event,args){console.log("event",event),console.log("args",args);var component=args.component,position=args.position,classes=component+"-open "+component+"-"+position+"-open";$(args.selector).toggleClass(classes),setTimeout(function(){$scope.live.map.invalidateSize({animate:!0,pan:!1})},2e3)},geodash.handlers.zoomToLayer=function($scope,$interpolate,$http,$q,event,args){var $scope=geodash.api.getScope("geodash-main"),layer=args.layer,i=$.inArray(layer,$scope.state.view.featurelayers);i!=-1&&$scope.$broadcast("changeView",{layer:layer})},geodash.handlers.filterChanged=function($scope,$interpolate,$http,$q,event,args){console.log("event",event),console.log("args",args),$scope.state.filters[args.layer]=$.extend($scope.state.filters[args.layer],args.filter);var url=buildPageURL($interpolate,$scope.map_config,$scope.state);void 0!=url&&history.replaceState($scope.state,"",url),$scope.refreshMap($scope.state)},geodash.handlers.selectStyle=function($scope,$interpolate,$http,$q,event,args){console.log("event",event),console.log("args",args),$scope.$apply(function(){$scope.state.styles[args.layer]=args.style;var url=buildPageURL($interpolate,$scope.map_config,$scope.state);void 0!=url&&history.replaceState($scope.state,"",url),$scope.refreshMap($scope.state)})},geodash.handlers.stateChanged=function($scope,$interpolate,$http,$q,event,args){console.log("event",event),console.log("args",args),$scope.$apply(function(){$scope.state=$.extend($scope.state,args);var url=buildPageURL($interpolate,$scope.map_config,$scope.state);void 0!=url&&history.replaceState($scope.state,"",url),$scope.refreshMap($scope.state)})},geodash.handlers.viewChanged=function($scope,$interpolate,$http,$q,event,args){console.log("event",event),console.log("args",args),$scope.state.view=$.extend($scope.state.view,args);var url=buildPageURL($interpolate,$scope.map_config,$scope.state);void 0!=url&&history.replaceState($scope.state,"",url)},geodash.directives.ngX=function(){return{scope:!0,link:function($scope,$element,attrs){$scope.$watch(attrs.ngX,function(value){$element.attr("x",value)})}}},geodash.directives.ngY=function(){return{scope:!0,link:function($scope,$element,attrs){$scope.$watch(attrs.ngY,function(value){$element.attr("y",value)})}}},geodash.directives.ngWidth=function(){return{scope:!0,link:function($scope,$element,attrs){$scope.$watch(attrs.ngWidth,function(value){$element.attr("width",value)})}}},geodash.directives.ngR=function(){return{scope:!0,link:function($scope,$element,attrs){$scope.$watch(attrs.ngR,function(value){$element.attr("r",value)})}}},geodash.directives.ngFill=function(){return{scope:!0,link:function($scope,$element,attrs){$scope.$watch(attrs.ngFill,function(value){$element.attr("fill",value)})}}},geodash.directives.onLinkDone=function(){return{restriction:"A",link:function($scope,element,attributes){$scope.$emit(attributes.onLinkDone||"link_done",{element:element,attributes:attributes})}}},geodash.directives.onRepeatDone=function(){return{restriction:"A",link:function($scope,element,attributes){$scope.$emit(attributes.onRepeatDone||"repeat_done",{element:element,attributes:attributes})}}},geodash.directives.geodashBtnClose=function(){return{restrict:"EA",replace:!0,scope:{dismiss:"@target"},templateUrl:"geodash_btn_close.tpl.html",link:function($scope,element,attrs){}}},geodash.directives.geodashBtnInfo=function(){return{restrict:"EA",replace:!0,scope:{placement:"@placement",info:"@info"},templateUrl:"geodash_btn_info.tpl.html",link:function($scope,element,attrs){}}},geodash.directives.geodashBtn=function(){return{restrict:"EA",replace:!0,scope:{mode:"@mode",target:"@target",info:"@info",placement:"@tooltipPlacement"},templateUrl:"geodash_btn.tpl.html",link:function($scope,element,attrs){}}},geodash.directives.geodashLabel=function(){return{restrict:"EA",replace:!0,scope:{target:"@target",content:"@content"},templateUrl:"geodash_label.tpl.html",link:function($scope,element,attrs){}}},geodash.directives.geodashTab=function(){return{restrict:"EA",replace:!0,scope:{target:"@target",label:"@label",active:"@active",height:"@height"},templateUrl:"geodash_tab.tpl.html",link:function($scope,element,attrs){}}},geodash.directives.geodashTabs=function(){return{restrict:"EA",replace:!0,scope:!0,templateUrl:"geodash_tabs.tpl.html",link:function($scope,element,attrs){}}},geodash.directives.geodashModalLayerCarto=function(){return{restrict:"EA",replace:!0,scope:!0,templateUrl:"geodash_modal_layer_carto.tpl.html",link:function($scope,element,attrs){}}},geodash.directives.geodashModalLayerMore=function(){return{restrict:"EA",replace:!0,scope:!0,templateUrl:"geodash_modal_layer_more.tpl.html",link:function($scope,element,attrs){}}},geodash.directives.geodashModalLayerConfig=function(){return{restrict:"EA",replace:!0,scope:!0,templateUrl:"geodash_modal_layer_config.tpl.html",link:function($scope,element,attrs){}}},geodash.directives.geodashSymbolCircle=function(){return{restrict:"EA",replace:!0,scope:{style:"=style"},templateUrl:"symbol_circle.tpl.html",link:function($scope,element,attrs){}}},geodash.directives.geodashSymbolEllipse=function(){return{restrict:"EA",replace:!0,scope:{style:"=style"},templateUrl:"symbol_ellipse.tpl.html",link:function($scope,element,attrs){}}},geodash.directives.geodashSymbolGraduated=function(){return{restrict:"EA",replace:!0,scope:{style:"=style",containerWidth:"@"},templateUrl:"symbol_graduated.tpl.html",link:function($scope,element,attrs){}}},geodash.directives.geodashSymbolGraphic=function(){return{restrict:"EA",replace:!0,scope:{style:"=style"},templateUrl:"symbol_graduated.tpl.html",link:function($scope,element,attrs){}}},geodash.directives.geodashLegendBaselayers=function(){return{restrict:"EA",replace:!0,scope:!0,templateUrl:"legend_baselayers.tpl.html",link:function($scope,element,attrs){}}},geodash.directives.geodashLegendFeaturelayers=function(){return{restrict:"EA",replace:!0,scope:!0,templateUrl:"legend_featurelayers.tpl.html",link:function($scope,element,attrs){}}},geodash.directives.geodashModalWelcome=function(){return{restrict:"EA",replace:!0,scope:!0,templateUrl:"geodash_modal_welcome.tpl.html",link:function($scope,element,attrs){}}},geodash.directives.geodashModalAbout=function(){return{restrict:"EA",replace:!0,scope:!0,templateUrl:"geodash_modal_about.tpl.html",link:function($scope,element,attrs){}}},geodash.directives.geodashModalDownload=function(){return{restrict:"EA",replace:!0,scope:!0,templateUrl:"geodash_modal_download.tpl.html",link:function($scope,element,attrs){}}},geodash.directives.geodashMapOverlays=function(){return{restrict:"EA",replace:!0,scope:{editable:"@editable"},templateUrl:"map_overlays.tpl.html",link:function($scope,element,attrs){$scope.map_config=$scope.$parent.map_config,$scope.map_config_flat=$scope.$parent.map_config_flat,$scope.style=function(type,overlay){var styleMap={};return $.extend(styleMap,{top:extract("position.top",overlay,"auto"),bottom:extract("position.bottom",overlay,"auto"),left:extract("position.left",overlay,"auto"),right:extract("position.right",overlay,"auto"),padding:extract("padding",overlay,"0"),background:extract("background",overlay,"transparent"),opacity:extract("opacity",overlay,"1.0"),width:extract("width",overlay,"initial"),height:extract("height",overlay,"initial")}),"text"==type&&$.extend(styleMap,{"font-family":extract("text.font.family",overlay,"Arial"),"font-size":extract("text.font.size",overlay,"12px"),"font-style":extract("text.font.style",overlay,"normal"),"text-shadow":extract("text.shadow",overlay,"none")}),$.map(styleMap,function(value,style){return style+": "+value}).join(";")+";"},geodash.api.parseTrue($scope.editable)&&($(element).on("mouseenter",".geodash-map-overlay",function(event,args){$(this).draggable("enable"),$(".geodash-map-grid").addClass("on")}),$(element).on("mouseleave",".geodash-map-overlay",function(event,args){$(this).draggable("disable"),$(".geodash-map-grid").removeClass("on")}),$scope.$on("overlayLoaded",function(event,args){console.log("overlayLoaded",event,args);var overlayElement=(args.attributes.overlayType,$(args.element)),container=overlayElement.parents(".geodash-map:first");overlayElement.draggable({containment:container,start:function(event,args){$(this).css("cursor","-webkit-grabbing")},drag:function(event,args){},stop:function(event,args){$(this).css("cursor","pointer"),console.log(event,args);var newPosition=args.position,overlayIndex=$(this).data("overlay-index"),scope=geodash.api.getScope("geodash-sidebar-right");if(void 0!=scope){var mapWidth=container.width(),mapHeight=container.height();scope.map_config_flat["overlays__"+overlayIndex+"__position__top"]=newPosition.top<mapHeight/2?newPosition.top+"px":"auto",scope.map_config_flat["overlays__"+overlayIndex+"__position__bottom"]=newPosition.top>=mapHeight/2?mapHeight-newPosition.top+"px":"auto",scope.map_config_flat["overlays__"+overlayIndex+"__position__left"]=newPosition.left<mapWidth/2?newPosition.left+"px":"auto",scope.map_config_flat["overlays__"+overlayIndex+"__position__right"]=newPosition.left>=mapWidth/2?mapWidth-newPosition.left+"px":"auto",setTimeout(function(){scope.validateFields(["overlays__"+overlayIndex+"__position__top","overlays__"+overlayIndex+"__position__bottom","overlays__"+overlayIndex+"__position__left","overlays__"+overlayIndex+"__position__right"])},0)}}})}))}}},geodash.directives.geodashSidebarToggleLeft=function(){return{restrict:"EA",replace:!0,scope:{selector:"@selector"},templateUrl:"geodash_sidebar_toggle_left.tpl.html",link:function($scope,$element,attrs){setTimeout(function(){$('[data-toggle="tooltip"]',$element).tooltip()},10)}}},geodash.directives.geodashSidebarToggleRight=function(){return{restrict:"EA",replace:!0,scope:{selector:"@selector"},templateUrl:"geodash_sidebar_toggle_right.tpl.html",link:function($scope,$element,attrs){setTimeout(function(){$('[data-toggle="tooltip"]',$element).tooltip()},10)}}},geodash.directives.geodashBreadcrumbs=function(){return{restrict:"EA",replace:!0,scope:!0,templateUrl:"breadcrumbs.tpl.html",link:function($scope,element,attrs){}}},geodash.directives.geodashCalendar=function(){return{restrict:"EA",replace:!0,scope:!0,templateUrl:"calendar.tpl.html",link:function($scope,element,attrs){}}},geodash.directives.geodashModalFilterMore=function(){return{restrict:"EA",replace:!0,scope:!0,templateUrl:"modal_filter_more.tpl.html",link:function($scope,element,attrs){}}},geodash.directives.geodashFilterCheckbox=function(){return{restrict:"EA",replace:!0,scope:!0,templateUrl:"filter_checkbox.tpl.html",link:function($scope,element,attrs){}}},geodash.directives.geodashFilterRadio=function(){return{restrict:"EA",replace:!0,scope:!0,templateUrl:"filter_radio.tpl.html",link:function($scope,element,attrs){}}},geodash.directives.geodashFilterSlider=function(){return{restrict:"EA",replace:!0,scope:!0,templateUrl:"filter_slider.tpl.html",link:function($scope,element,attrs){}}},geodash.directives.geodashFilterContainer=function(){return{restrict:"EA",replace:!0,scope:!0,templateUrl:"filter_container.tpl.html",link:function($scope,element,attrs){}}},geodash.directives.sparcSidebar=function(){return{controller:geodash.controllers.controller_sparc_sidebar,restrict:"EA",replace:!0,scope:!0,templateUrl:"sparc_sidebar.tpl.html",link:function($scope,$element,attrs){setTimeout(function(){$('[data-toggle="tooltip"]',$element).tooltip();$($element);if(void 0!=$scope.charts)for(var i=0;i<$scope.charts.length;i++){var options={};buildHazardChart($scope.charts[i],geodash.initial_data.layers.popatrisk,options)}},10)}}},geodash.directives.sparcSidebarFeatureLayer=function(){return{controller:geodash.controllers.controller_sparc_sidebar,restrict:"EA",replace:!0,scope:!0,templateUrl:"sparc_sidebar_feature_layer.tpl.html",link:function($scope,$element,attrs){setTimeout(function(){$($element);if(void 0!=$scope.charts)for(var i=0;i<$scope.charts.length;i++){var options={};buildHazardChart($scope.charts[i],geodash.initial_data.layers.popatrisk,options)}},10)}}},geodash.directives.sparcModalWelcome=function(){return{controller:geodash.controllers.SPARCControllerModalWelcome,restrict:"EA",replace:!0,scope:{},templateUrl:"sparc_modal_welcome.tpl.html",link:function($scope,element,attrs){setTimeout(function(){$("#country-input, #hazard-input",element).each(function(){var s=$(this),initialData=(s.data("placeholder"),s.data("initialData")),template_empty=(s.data("width"),s.data("height"),s.data("template-empty")),engine=(s.data("template-suggestion"),new Bloodhound({identify:function(obj){return obj.text},datumTokenizer:function(d){return Bloodhound.tokenizers.whitespace(d.text)},queryTokenizer:Bloodhound.tokenizers.whitespace,local:geodash.initial_data.data[initialData]}));s.typeahead(null,{name:s.attr("name"),minLength:1,limit:10,hint:!1,highlight:!0,displayKey:"text",source:engine,templates:{empty:template_empty,suggestion:function(data){return"<p><strong>"+data.text+"</strong> - "+data.id+"</p>"},footer:function(data){return"<div>Searched for <strong>"+data.query+"</strong></div>"}}}).on("blur",function(event){var results=engine.get($(this).val());$("#"+$(this).data("backend")).val(1==results.length?results[0].id:null).trigger("input").change()}).on("typeahead:change",function(event,value){console.log("Event: ",event,value);var results=engine.get(value);$("#"+$(this).data("backend")).val(1==results.length?results[0].id:null).trigger("input").change()}).on("typeahead:select typeahead:autocomplete typeahead:cursorchange",function(event,obj){console.log("Event: ",event,obj);$("#"+$(this).data("backend")).val("id"in obj?obj.id:null).trigger("input").change()})}),sparc.welcome()},10)}}},geodash.controllers.GeoDashControllerBase=function($scope,$element,$controller,state,map_config,live){},geodash.controllers.GeoDashControllerModal=function($scope,$element,$controller,$timeout,state,map_config,live){angular.extend(this,$controller("GeoDashControllerBase",{$element:$element,$scope:$scope})),$scope.stack={head:void 0,prev:void 0,backtrace:[]},$scope.showModal=function(x){return angular.isString(x)?""!=x:!angular.isNumber(x)||x>=0},$scope.pop=function(){var removed=$scope.stack.backtrace.shift();$scope.update_stack(),$scope.update_main(removed),$scope.update_ui(removed,$scope.stack.backtrace)},$scope.update_stack=function(backtrace){angular.isDefined(backtrace)&&($scope.stack.backtrace=backtrace),$scope.stack.backtrace.length>=2?($scope.stack.head=$scope.stack.backtrace[0],$scope.stack.prev=$scope.stack.backtrace[1]):1==$scope.stack.backtrace.length?($scope.stack.head=$scope.stack.backtrace[0],$scope.stack.prev=void 0):($scope.stack.head=void 0,$scope.stack.prev=void 0)},$scope.update_main=function(removed){angular.isDefined($scope.stack.head)&&$scope.stack.head.modal==removed.modal&&$.each($scope.stack.head,function(key,value){$scope[key]=value})},$scope.update_breadcrumbs=function(){var breadcrumbs=[];if(angular.isDefined(extract("stack.backtrace",$scope))){for(var i=$scope.stack.backtrace.length-1;i>=0;i--){var x=$scope.stack.backtrace[i];if(angular.isDefined(x.objectIndex)){var obj=extract(x.path_array,x.workspace),content=extract("title",obj)||extract("id",obj)||x.objectIndex,link="#",bc={content:content,link:link};breadcrumbs.push(bc)}else{var keyChain=x.schemapath_array||x.basepath_array;if(angular.isDefined(keyChain)){var f=extract(keyChain,x.schema);if(angular.isDefined(f)){var t=extract("type",f),content=void 0,link="#";content="object"==t?extract("schema.verbose_singular",f)||extract("label",f):"objectarray"==t||"stringarray"==t||"textarray"==t||"templatearray"==t?extract("schema.verbose_plural",f)||extract("label",f):extract("label",f);var bc={content:content,link:link};breadcrumbs.push(bc)}}}}$scope.breadcrumbs=breadcrumbs}return breadcrumbs},$scope.update_ui=function(removed,backtrace){if(angular.isDefined($scope.stack.head))if($scope.stack.head.modal==removed.modal)$scope.update_breadcrumbs();else{var oldModal=removed.modal,newModal=$scope.stack.head.modal;$("#"+oldModal).modal("hide"),$("#"+newModal).modal({backdrop:"static",keyboard:!1}),$timeout(function(){var newScope=geodash.api.getScope(newModal);newScope.update_stack(backtrace),$.each(newScope.stack.head,function(key,value){newScope[key]=value}),newScope.update_breadcrumbs(),$("#"+newModal).modal("show"),$timeout(function(){$('[data-toggle="tooltip"]',$("#"+newModal)).tooltip()},0)},0)}else $("#"+removed.modal).modal("hide")},$scope.clear=function(){$scope.clear_all(1)},$scope.clear_all=function(count){var backtrace=$scope.stack.backtrace;if(backtrace.length>0)for(var clear_array=["workspace","workspace_flat","schema","schema_flat","basepath","basepath_flat","basepath_array","schemapath","schemapath_flat","schemapath_array","objectIndex","path","path_flat","path_array","breadcrumbs"],s=void 0,i=0;i<count&&i<backtrace.length;i++){var x=backtrace[i];if(angular.isUndefined(s)){var m=extract("modal",x);s=angular.isDefined(m)?geodash.api.getScope(m):$scope}$.each(x,function(key,value){s[key]=void 0}),$.each(clear_array,function(index,value){s[value]=void 0})}},$scope.push=function(x,backtrace){$scope.clear(),x=$scope.expand(x),$scope.update_stack([x].concat(backtrace||$scope.stack.backtrace)),$.each($scope.stack.head,function(key,value){$scope[key]=value}),$scope.update_breadcrumbs()},$scope.expand=function(x){return angular.isDefined(x)&&(angular.isDefined(x.schemapath)&&(x.schemapath_flat=x.schemapath.replace(new RegExp("\\.","gi"),"__"),x.schemapath_array=x.schemapath.split(".")),angular.isDefined(x.basepath)?(x.basepath_array=x.basepath.split("."),angular.isDefined(x.schemapath)?x.object_fields=extract(x.schemapath_array.concat(["schema","fields"]),x.schema,[]):x.object_fields=extract(x.basepath_array.concat(["schema","fields"]),x.schema,[]),angular.isDefined(x.objectIndex)?(x.path=x.basepath+"."+x.objectIndex,x.path_flat=x.path.replace(new RegExp("\\.","gi"),"__"),x.path_array=x.basepath_array.concat([x.objectIndex])):(x.path=x.basepath,x.path_flat=x.path.replace(new RegExp("\\.","gi"),"__"),x.path_array=x.path.split("."))):angular.isDefined(x.path)&&(x.path_flat=x.path.replace(new RegExp("\\.","gi"),"__"),x.path_array=x.path.split(".")),angular.isDefined(x.workspace)&&(x.workspace_flat=geodash.api.flatten(x.workspace)),angular.isDefined(x.schema)&&(x.schema_flat=geodash.api.flatten(x.schema))),x},$scope.rollback=function(index){var count=angular.isDefined(index)?$scope.stack.backtrace.length-index-1:1;$scope.clear_all(count),$timeout(function(){var removed=$scope.stack.backtrace[0];$scope.update_stack($scope.stack.backtrace.slice(count)),$scope.update_main(removed),$scope.update_ui(removed,$scope.stack.backtrace)},0)},$scope.go_back=function(){$scope.clear(),$timeout(function(){$scope.pop()},0)},$scope.edit_field=function(field_id,field_index){var schemapath=$scope.stack.head.path;angular.isDefined($scope.stack.head.schemapath_array)&&angular.isDefined(field_index)&&(schemapath=$scope.stack.head.schemapath+".schema.fields."+field_index);var x={modal:"geodash-modal-edit-field",
prev:$scope.stack.head.modal,workspace:$scope.stack.head.workspace,schema:$scope.stack.head.schema,basepath:$scope.stack.head.path,schemapath:schemapath,objectIndex:field_id};console.log("New X:"),console.log(x),$scope.stack.head.modal==x.modal?($scope.clear(),$timeout(function(){$scope.push(x)},0)):($("#"+$scope.stack.head.modal).modal("hide"),geodash.api.getScope(x.modal).push(x,$scope.stack.backtrace),$("#"+x.modal).modal({backdrop:"static",keyboard:!1}),$("#"+x.modal).modal("show"),$timeout(function(){$('[data-toggle="tooltip"]',$("#"+x.modal)).tooltip()},0))},$scope.add_object=function(field_id){var value=extract($scope.stack.head.path,$scope.stack.head.workspace),length=angular.isDefined(value)?value.length:0;$scope.edit_object(length)},$scope.edit_object=function(field_id,field_index){var schemapath=$scope.stack.head.schemapath||$scope.stack.head.path;angular.isDefined($scope.stack.head.schemapath)&&angular.isDefined(field_index)&&(schemapath=$scope.stack.head.schemapath+".schema.fields."+field_index);var x={modal:"geodash-modal-edit-object",prev:$scope.stack.head.modal,workspace:$scope.stack.head.workspace,schema:$scope.stack.head.schema,basepath:$scope.stack.head.path,schemapath:schemapath,objectIndex:field_id};if(console.log("New X:"),console.log(x),$scope.stack.head.modal==x.modal)$scope.clear(),$timeout(function(){$scope.push(x),$timeout(function(){$('[data-toggle="tooltip"]',$("#"+x.modal)).tooltip()},0)},0);else{$("#"+$scope.stack.head.modal).modal("hide");var targetScope=geodash.api.getScope(x.modal),backtrace=$scope.stack.backtrace;targetScope.clear(),$timeout(function(){targetScope.push(x,backtrace);var m=$("#"+x.modal);m.modal({backdrop:"static",keyboard:!1}),m.modal("show"),$timeout(function(){$('[data-toggle="tooltip"]',m).tooltip()},0)},0)}},$scope.save_object=function(){var workspace=$scope.workspace,workspace_flat=$scope.workspace_flat;$scope.clear_all(2),$timeout(function(){var saved=$scope.stack.backtrace.shift();if($scope.stack.backtrace.length>0){var backtrace=$scope.stack.backtrace;if(backtrace[0].workspace=workspace,backtrace[0].workspace_flat=workspace_flat,$scope.update_stack(backtrace),$scope.stack.head.modal==saved.modal)$.each($scope.stack.head,function(key,value){$scope[key]=value}),$scope.workspace=$scope.stack.head.workspace=workspace,$scope.workspace_flat=$scope.stack.head.workspace_flat=workspace_flat,$scope.update_breadcrumbs();else{var oldModal=saved.modal,newModal=$scope.stack.head.modal;$("#"+oldModal).modal("hide"),$("#"+newModal).modal({backdrop:"static",keyboard:!1}),$timeout(function(){var newScope=geodash.api.getScope(newModal);newScope.update_stack(backtrace),$.each(newScope.stack.head,function(key,value){newScope[key]=value}),newScope.update_breadcrumbs(),$("#"+newModal).modal("show"),$timeout(function(){$('[data-toggle="tooltip"]',$("#"+newModal)).tooltip()},0)},0)}}else{var targetScope=geodash.api.getScope("geodash-sidebar-right");targetScope.workspace=workspace,targetScope.workspace_flat=workspace_flat,$("#"+saved.modal).modal("hide")}},0)},$scope.modal_title=function(){for(var breadcrumbs=[],i=$scope.stack.backtrace.length-1;i>=0;i--){var x=$scope.stack.backtrace[i];if(angular.isDefined(x.objectIndex)){var obj=extract(x.path_array,x.workspace);breadcrumbs.push(extract("title",obj)||extract("id",obj)||x.objectIndex)}else{var f=extract(x.schemapath_array||x.basepath_array,x.schema);if(angular.isDefined(f)){var t=extract("type",f);"object"==t?breadcrumbs.push(extract("schema.verbose_singular",f)||extract("label",f)):"objectarray"==t||"stringarray"==t||"textarray"==t||"templatearray"==t?breadcrumbs.push(extract("schema.verbose_plural",f)||extract("label",f)):breadcrumbs.push(extract("label",f))}}}return"Edit / "+breadcrumbs.join(" / ")},$scope.back_label=function(){var label="Cancel";if(angular.isDefined($scope.stack.head)&&$scope.stack.backtrace.length>1){var x=$scope.stack.backtrace[1],t=extract(x.schemapath_array||x.basepath_array,x.schema);label="objectarray"==t.type&&angular.isNumber($scope.stack.head.objectIndex)?"Back to "+(extract("schema.verbose_plural",t)||extract("label",t)):"Back to "+(extract("schema.verbose_singular",t)||extract("label",t))}return label},$scope.save_label=function(){var label="";if(angular.isDefined($scope.stack.head)){var x=$scope.stack.head,t=extract(x.schemapath_array||x.basepath_array,x.schema);label="objectarray"!=t.type||angular.isDefined($scope.stack.head.objectIndex)?"Save "+(extract("schema.verbose_singular",t)||"Object"):"Save "+(extract("schema.verbose_plural",t)||extract("label",t)||"Object")}else label="Save";return label}},geodash.controllers.controller_legend=function($scope,$element,$controller,state,map_config,live){angular.extend(this,$controller("GeoDashControllerBase",{$element:$element,$scope:$scope})),$scope.map_config=map_config,$scope.state=state,$scope.html5data=function(){var args=arguments,zero_lc=args[0].toLowerCase();if("togglemodal"==zero_lc){var layerType=(args[1],args[2]),layer=args[3];return{id:args[1],"static":{layerID:layer.id},dynamic:{layer:[layerType,layer.id]}}}return""},$scope.updateVariables=function(){var arrayFilter=$scope.map_config.legendlayers;if("baselayers"in $scope.map_config&&void 0!=$scope.map_config.baselayers){var baselayers=$.grep($scope.map_config.baselayers,function(x,i){return $.inArray(x.id,arrayFilter)!=-1});baselayers.sort(function(a,b){return $.inArray(a.id,arrayFilter)-$.inArray(b.id,arrayFilter)}),$scope.baselayers=baselayers}else $scope.baselayers=[];if("featurelayers"in $scope.map_config&&void 0!=$scope.map_config.featurelayers){var featurelayers=$.grep($scope.map_config.featurelayers,function(x,i){return $.inArray(x.id,arrayFilter)!=-1});featurelayers.sort(function(a,b){return $.inArray(a.id,arrayFilter)-$.inArray(b.id,arrayFilter)}),$scope.featurelayers=featurelayers}else $scope.featurelayers=[]},$scope.updateVariables(),$scope.$watch("map_config.featurelayers",$scope.updateVariables),$scope.$watch("map_config.legendlayers",$scope.updateVariables),$scope.$watch("state",$scope.updateVariables);$($element);$scope.$on("refreshMap",function(event,args){console.log("args: ",args),$scope.state=args.state})},geodash.controllers.controller_breadcrumb=function($scope,$element,$controller,state){angular.extend(this,$controller("GeoDashControllerBase",{$element:$element,$scope:$scope})),$scope.state=state,$scope.breadcrumbs=SPARC_BREADCRUMBS,setTimeout(function(){$("select",$element).each(function(){var s=$(this),breadcrumbs=s.data("breadcrumbs"),placeholder=s.data("placeholder"),initialData=s.data("initialData"),w=s.data("width"),h=s.data("height"),css="sparc-select-dropdown";s.select2({data:geodash.initial_data.data[initialData],placeholder:placeholder,allowClear:!1,width:w,height:h,dropdownCssClass:css}),s.on("select2:select",function(e){var newValue=e.params.data.id;$scope.$apply(function(){var output=s.data("output");$scope.state[output]=newValue});for(var url="",i=0;i<breadcrumbs.length;i++){var bc=breadcrumbs[i];void 0!=state[bc.value]&&(url+="/"+bc.name+"/"+$scope.state[bc.value])}console.log("Going to url ",url),window.location.href=url})})},10)},geodash.controllers.controller_calendar=function($scope,$element,$controller,state,map_config,live){angular.extend(this,$controller("GeoDashControllerBase",{$element:$element,$scope:$scope})),$scope.state=state,$scope.months=MONTHS_ALL,$scope.$on("refreshMap",function(event,args){"state"in args&&($scope.state=args.state)})},geodash.controllers.controller_filter=function($scope,$element,$controller,$interpolate,state,map_config,live){var maxValueFromSummary=geodash.initial_data.layers.popatrisk.data.summary.all.max.at_admin2_month;angular.extend(this,$controller("GeoDashControllerBase",{$element:$element,$scope:$scope})),$scope.filters=geodash.api.getFeatureLayer("popatrisk").filters,setTimeout(function(){$($element).on("change","input:checkbox",function(event){console.log(event);var that=this,output=$(that).data("output"),filter={},btngroup=$(that).parents(".btn-group:first"),output=btngroup.data("output");void 0==filter[output]&&(filter[output]=[]),btngroup.find("input").each(function(){$(this).is(":checked")?(filter[output].push($(this).data("value")),$(this).parent("label").removeClass("btn-default").addClass("btn-warning")):$(this).parent("label").addClass("btn-default").removeClass("btn-warning")}),geodash.api.intend("filterChanged",{layer:"popatrisk",filter:filter},$scope)}),$($element).on("change",'input:radio[name="cat"]',function(event){console.log(event);var output=$(this).data("output"),filter={};filter[output]=this.value,geodash.api.intend("filterChanged",{layer:"popatrisk",filter:filter},$scope)}),$(".geodash-filter-slider",$($element)).each(function(){var slider=$(this).find(".geodash-filter-slider-slider"),label=$(this).find(".geodash-filter-slider-label"),type=slider.data("type"),output=slider.data("output");if("ordinal"==type){var range=slider.data("range"),value=state.filters.popatrisk[output],options=slider.data("options");slider.data("label",label),geodash.ui_init_slider_label($interpolate,slider,type,range,value),geodash.ui_init_slider_slider($interpolate,$scope,slider,type,range,options.indexOf(value),0,options.length-1,1)}else{var range=slider.data("range"),minValue=geodash.assert_float(slider.data("min-value"),0),step=slider.data("step");if("boolean"==$.type(range)&&range||"true"==range.toLowerCase()){var maxValue=void 0!=maxValueFromSummary&&"summary"==slider.data("max-value")?maxValueFromSummary:geodash.assert_float(slider.data("max-value"),void 0),values=state.filters.popatrisk[output];values=geodash.assert_array_length(values,2,[minValue,maxValue]);var values_n=[Math.floor(values[0]),Math.floor(values[1])],min_n=Math.floor(minValue),max_n=Math.floor(maxValue),step_n=Math.floor(step);slider.data("label",label),geodash.ui_init_slider_label($interpolate,slider,type,range,values),geodash.ui_init_slider_slider($interpolate,$scope,slider,type,range,values_n,min_n,max_n,step_n),console.log(value_n,min_n,max_n,step_n,range)}else{var maxValue=geodash.assert_float(slider.data("max-value"),void 0),value=state.filters.popatrisk[output],value_n=Math.floor(100*value),min_n=Math.floor(100*minValue),max_n=Math.floor(100*maxValue),step_n=Math.floor(100*step);slider.data("label",label),geodash.ui_init_slider_label($interpolate,slider,type,range,value),geodash.ui_init_slider_slider($interpolate,$scope,slider,type,range,values_n,min_n,max_n,step_n),console.log(value_n,min_n,max_n,step_n,range)}}})},10)};var highlightFeature=function(e){e.target},init_map=function(opts){var map=L.map("map",{zoomControl:geodash.api.opt_b(opts,"zoomControl",!1),minZoom:geodash.api.opt_i(opts,"minZoom",3),maxZoom:geodash.api.opt_i(opts,"maxZoom",18)});return map.setView([geodash.api.opt_i(opts,["latitude","lat"],0),geodash.api.opt_i(opts,["longitude","lon","lng","long"],0)],geodash.api.opt_i(opts,["zoom","z"],0)),$.each(geodash.api.opt_j(opts,"listeners"),function(e,f){map.on(e,f)}),map};geodash.controllers.controller_map_map=function($rootScope,$scope,$element,$compile,$interpolate,$templateCache,$http,$q,state,map_config,live){$scope.processEvent=function(event,args){for(var c=$.grep(geodash.meta.controllers,function(x,i){return"controller_map_map"==x.name})[0],i=0;i<c.handlers.length;i++)c.handlers[i].event==event.name&&geodash.handlers[c.handlers[i].handler]($scope,$interpolate,$http,$q,event,args)};for(var c=$.grep(geodash.meta.controllers,function(x,i){return"controller_map_map"==x.name})[0],i=0;i<c.handlers.length;i++)$scope.$on(c.handlers[i].event,$scope.processEvent);var listeners={click:function(e){var c=e.latlng,delta={lat:c.lat,lon:c.lng};geodash.api.intend("clickedOnMap",delta,$scope)},zoomend:function(e){var delta={extent:live.map.getBounds().toBBoxString(),z:live.map.getZoom()};geodash.api.intend("viewChanged",delta,$scope)},dragend:function(e){var c=live.map.getCenter(),delta={extent:live.map.getBounds().toBBoxString(),lat:c.lat,lon:c.lng};geodash.api.intend("viewChanged",delta,$scope)},moveend:function(e){var c=live.map.getCenter(),delta={extent:live.map.getBounds().toBBoxString(),lat:c.lat,lon:c.lng};geodash.api.intend("viewChanged",delta,$scope)}},hasViewOverride=hasHashValue(["latitude","lat","longitude","lon","lng","zoom","z"]),view=state.view;live.map=init_map({zoomControl:map_config.controls.zoom,minZoom:map_config.view.minZoom,maxZoom:map_config.view.maxZoom,lat:view.lat,lon:view.lon,z:view.z,listeners:listeners});var baseLayers=geodash.layers.init_baselayers(live.map,map_config.baselayers);$.extend(live.baselayers,baseLayers);var baseLayerID=map_config.baselayers[0].id;if(live.baselayers[baseLayerID].addTo(live.map),geodash.api.intend("viewChanged",{baselayer:baseLayerID},$scope),geodash.api.intend("layerLoaded",{type:"baselayer",layer:baseLayerID},$scope),$.each(map_config.featurelayers,function(i,layerConfig){$.inArray(layerConfig.id,["popatrisk","context","vam"])==-1&&geodash.layers.init_featurelayer(layerConfig.id,layerConfig,$scope,live,map_config)}),geodash.api.hasFeatureLayer("context")&&"features"in geodash.initial_data.layers.context.data.geojson){var context_popup_content=function(source){console.log(source);var fl=geodash.api.getFeatureLayer("context"),f=source.feature,popupTemplate=geodash.popup.buildPopupTemplate(fl.popup,fl,f),ctx={layer:fl,feature:{attributes:f.properties,geometry:{}}};return $interpolate(popupTemplate)(ctx)};live.featurelayers.context=L.geoJson(geodash.initial_data.layers.context.data.geojson,{renderOrder:$.inArray("context",map_config.renderlayers),style:geodash.initial_data.layers.context.style["default"],hoverStyle:geodash.initial_data.layers.context.style.hover,onEachFeature:function(f,layer){var popupOptions={maxWidth:300};layer.bindPopup(context_popup_content,popupOptions);var fl=geodash.api.getFeatureLayer("context");if("label"in fl.cartography[0]){var featureLabel=$interpolate(fl.cartography[0].label.value)({layer:fl,feature:{attributes:f.properties,geometry:{}}});layer.bindLabel(featureLabel)}layer.on({mouseover:highlightFeature,mouseout:function(e){live.featurelayers.context.resetStyle(e.target)}})}})}if(geodash.api.hasFeatureLayer("popatrisk")&&"features"in geodash.initial_data.layers.popatrisk.data.geojson){var popatrisk_popup_content=function(source){console.log(source);var $scope=angular.element("#geodash-main").scope(),state=$scope.state,featureLayer=geodash.api.getFeatureLayer("popatrisk"),popupConfig=featureLayer.popup,feature=geodash.api.normalize_feature(source.feature);feature.attributes.popatrisk=sparc.calculate_population_at_risk(state.hazard,feature,state,["vam_filter_fcs","vam_filter_csi"]);var popupContent=geodash.popup.buildPopupContent($interpolate,featureLayer,feature,state);return setTimeout(function(){for(var i=0;i<popupConfig.panes.length;i++){var pane=popupConfig.panes[i];if("charts"in pane)for(var j=0;j<pane.charts.length;j++){var chartConfig=pane.charts[j],gc=buildGroupsAndColumnsForAdmin2(chartConfig,geodash.initial_data.layers.popatrisk,feature.attributes.admin2_code),chartOptions={groups:gc.groups,columns:gc.columns,bullet_width:function(d,i){return"rp25"==d.id?6:12}};buildHazardChart(chartConfig,geodash.initial_data.layers.popatrisk,chartOptions)}}},1e3),popupContent};live.featurelayers.popatrisk=L.geoJson(geodash.initial_data.layers.popatrisk.data.geojson,{renderOrder:$.inArray("popatrisk",map_config.renderlayers),style:geodash.initial_data.layers.popatrisk.style["default"],hoverStyle:geodash.initial_data.layers.popatrisk.style.hover,onEachFeature:function(f,layer){var popupOptions={maxWidth:300};layer.bindPopup(popatrisk_popup_content,popupOptions);var fl=geodash.api.getFeatureLayer("popatrisk"),label=extract(["cartography",0,"label"],fl);if(angular.isDefined(label)){var featureLabel=$interpolate(label.value)({layer:fl,feature:{attributes:f.properties,geometry:{}}});layer.bindLabel(featureLabel)}layer.on({mouseover:highlightFeature,mouseout:function(e){live.featurelayers.popatrisk.resetStyle(e.target)},click:function(e){}})}}),geodash.layers.init_featurelayer_post($scope,live,"popatrisk",live.featurelayers.popatrisk,$.inArray("popatrisk",map_config.renderlayers)!=-1),hasViewOverride||live.map.fitBounds(live.featurelayers.popatrisk.getBounds())}$scope.$on("refreshMap",function(event,args){console.log("Refreshing map...");var visibleBaseLayer=args.state.view.baselayer;$.each(live.baselayers,function(id,layer){var visible=id==visibleBaseLayer;live.map.hasLayer(layer)&&!visible?live.map.removeLayer(layer):!live.map.hasLayer(layer)&&visible&&live.map.addLayer(layer)});var visibleFeatureLayers=args.state.view.featurelayers;$.each(live.featurelayers,function(id,layer){var visible=$.inArray(id,visibleFeatureLayers)!=-1;live.map.hasLayer(layer)&&!visible?live.map.removeLayer(layer):!live.map.hasLayer(layer)&&visible&&live.map.addLayer(layer)});var renderLayers=$.grep(layersAsArray(live.featurelayers),function(layer){return $.inArray(layer.id,visibleFeatureLayers)!=-1}),renderLayersSorted=sortLayers($.map(renderLayers,function(layer,i){return layer.layer}),!0),baseLayers=($.map(live.baselayers,function(layer,id){return{id:id,layer:layer}}),$.map($.grep(layersAsArray(live.baselayers),function(layer){return layer.id==visibleBaseLayer}),function(layer,i){return layer.layer}));updateRenderOrder(baseLayers.concat(renderLayersSorted)),"popatrisk"in live.featurelayers&&void 0!=live.featurelayers.popatrisk&&live.featurelayers.popatrisk.setStyle(geodash.initial_data.layers.popatrisk.style["default"]),"context"in live.featurelayers&&void 0!=live.featurelayers.context&&live.featurelayers.context.setStyle(geodash.initial_data.layers.context.style["default"]),setTimeout(function(){live.map._onResize()},0)}),$scope.$on("changeView",function(event,args){console.log("Refreshing map..."),void 0!=args.layer&&live.map.fitBounds(live.featurelayers[args.layer].getBounds())}),$scope.$on("openPopup",function(event,args){console.log("Refreshing map..."),void 0!=args.featureLayer&&void 0!=args.feature&&void 0!=args.location&&geodash.popup.openPopup($interpolate,args.featureLayer,args.feature,args.location,live.map,angular.element("#geodash-main").scope().state)})},geodash.controllers.controller_sparc_sidebar=function($scope,$element,$controller,$timeout,state,map_config,live){angular.extend(this,$controller("GeoDashControllerBase",{$element:$element,$scope:$scope})),$scope.html5data=sparc.html5data,$scope.charts=map_config.charts,$scope.ui=map_config.sidebar.ui,$scope.filters=geodash.api.getFeatureLayer("popatrisk").filters;geodash.initial_data.layers.popatrisk.data.summary.all.max.at_admin2_month;$scope.updateVariables=function(){if("baselayers"in $scope.map_config&&void 0!=$scope.map_config.baselayers){var baselayers=$.grep($scope.map_config.baselayers,function(x,i){return $.inArray(x.id,$scope.ui.layers)!=-1});baselayers.sort(function(a,b){return $.inArray(a.id,$scope.ui.layers)-$.inArray(b.id,$scope.ui.layers)}),$scope.baselayers=baselayers}else $scope.baselayers=[];if("featurelayers"in $scope.map_config&&void 0!=$scope.map_config.featurelayers){var featurelayers=$.grep($scope.map_config.featurelayers,function(x,i){return $.inArray(x.id,$scope.ui.layers)!=-1});featurelayers.sort(function(a,b){return $.inArray(a.id,$scope.ui.layers)-$.inArray(b.id,$scope.ui.layers)}),$scope.featurelayers=featurelayers;var visiblefeaturelayers=$.grep($scope.map_config.featurelayers,function(x,i){return $.inArray(x.id,$scope.ui.layers)!=-1&&$.inArray(x.id,$scope.state.view.featurelayers)!=-1});visiblefeaturelayers.sort(function(a,b){return $.inArray(a.id,$scope.state.view.featurelayers)-$.inArray(b.id,$scope.state.view.featurelayers)}),$scope.visiblefeaturelayers=visiblefeaturelayers,$scope.groups=[];for(var i=0;i<$scope.ui.groups.length;i++){var g=$scope.ui.groups[i],layers=$.grep($scope.map_config.featurelayers,function(x,i){return $.inArray(x.id,g.layers)!=-1});layers.sort(function(a,b){return $.inArray(a.id,g.layers)-$.inArray(b.id,g.layers)}),$scope.groups.push({id:g.id,label:g.label,"class":g["class"],layers:layers})}}else $scope.featurelayers=[]},$scope.updateVariables(),$scope.$watch("state",$scope.updateVariables),$scope.$on("refreshMap",function(event,args){"state"in args&&($scope.state=args.state,$scope.updateVariables(),$timeout(function(){$scope.$digest()},0))})};var buildPageURL=function($interpolate,map_config,state){var template=geodash.api.getPage(state.page);if(void 0!=template){var url=$interpolate(template)(state),hash_args=[],view=state.view;void 0!=view&&void 0!=view.z&&void 0!=view.lat&&void 0!=view.lon&&(hash_args.push("z="+view.z),hash_args.push("lat="+view.lat.toFixed(4)),hash_args.push("lon="+view.lon.toFixed(4)));var filters=state.filters;return filters&&$.each(state.filters,function(layer_id,layer_filters){$.each(layer_filters,function(filter_id,filter_value){hash_args.push(layer_id+":"+filter_id+"="+filter_value)})}),hash_args.length>0&&(url+="#"+hash_args.join("&")),url}};geodash.controllers.controller_main=function($interpolate,$scope,$element,$controller,$http,$q,state,map_config,stateschema,live){$scope.map_config=map_config,$scope.state=geodash.init_state(state,stateschema),$scope.live=live,$scope.refreshMap=function(state){$scope.$broadcast("refreshMap",{state:state})},$scope.processEvent=function(event,args){for(var c=$.grep(geodash.meta.controllers,function(x,i){return"controller_main"==x.name})[0],i=0;i<c.handlers.length;i++)c.handlers[i].event==event.name&&geodash.handlers[c.handlers[i].handler]($scope,$interpolate,$http,$q,event,args)},$.each(geodash.listeners,function(i,x){$scope.$on(i,x)});for(var c=$.grep(geodash.meta.controllers,function(x,i){return"controller_main"==x.name})[0],i=0;i<c.handlers.length;i++)$scope.$on(c.handlers[i].event,$scope.processEvent)};var init_sparc_controller_main=function(that,app){app.controller("GeoDashControllerBase",geodash.controllers.GeoDashControllerBase),app.controller("GeoDashControllerModal",geodash.controllers.GeoDashControllerModal),geodash.init_controller(that,app,geodash.controllers.controller_main);var selector_controller_base=[".geodash-controller.geodash-about",".geodash-controller.geodash-download",".geodash-controller.geodash-dashboard-config","[geodash-controller='geodash-modal']","[geodash-controller='geodash-base']"].join(", ");geodash.init_controllers(that,app,[{selector:selector_controller_base,controller:geodash.controllers.controller_base}]),$("[geodash-controller='geodash-map']",that).each(function(){geodash.init_controller($(this),app,geodash.controllers.controller_base),geodash.init_controllers($(this),app,[{selector:"[geodash-controller='geodash-map-map']",controller:geodash.controllers.controller_map_map},{selector:"[geodash-controller='sparc-map-calendar']",controller:geodash.controllers.controller_calendar},{selector:"[geodash-controller='sparc-map-breadcrumb']",controller:geodash.controllers.controller_breadcrumb},{selector:"[geodash-controller='geodash-map-filter']",controller:geodash.controllers.controller_filter},{selector:"[geodash-controller='geodash-map-legend']",controller:geodash.controllers.controller_legend},{selector:"[geodash-controller='sparc-welcome']",controller:geodash.controllers.controller_sparc_welcome}])})};geodash.controllers.SPARCControllerModalWelcome=function($scope,$element,$controller,$interpolate,state,map_config,live){angular.extend(this,$controller("GeoDashControllerModal",{$element:$element,$scope:$scope}));var m=$.grep(geodash.meta.modals,function(x,i){return"sparc_welcome"==x.name})[0];$scope.config=m.config,$scope.ui=m.ui,$scope.showOptions=geodash.ui.showOptions,$scope.updateValue=geodash.api.updateValue,$scope.showOptions=geodash.ui.showOptions};